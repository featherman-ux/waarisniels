---
const ROUTE_URL  = "/data/route.geojson";
const PLACES_URL = "/data/places.json";
---
<style>
  .mini-map-wrap {
    position: relative;
    max-width: 560px;
    margin: 0 auto 2rem;
  }
  .mini-map {
    height: 260px;
    border-radius: 12px;
    overflow: hidden;
    border: 1px solid #e5e7eb;
    box-shadow: 0 6px 14px rgba(0,0,0,0.08);
  }
  .mini-map-link {
    position: absolute;
    inset: 0;
    z-index: 20;
    text-indent: -9999px;
  }
  .mini-map-cta {
    position: absolute;
    right: 10px;
    bottom: 10px;
    z-index: 25;
    background: #fff;
    border: 1px solid #e5e7eb;
    border-radius: 9999px;
    padding: .35rem .7rem;
    font-size: .9rem;
    color: #023047;
    box-shadow: 0 2px 8px rgba(0,0,0,.06);
    text-decoration: none;
  }
</style>

<div class="mini-map-wrap">
  <a class="mini-map-link" href="/map/">Bekijk interactieve kaart</a>
  <div id="mini-map" class="mini-map" role="img" aria-label="Mini kaart van mijn route"></div>
  <a href="/map/" class="mini-map-cta" aria-label="Bekijk de interactieve kaart">Open kaart →</a>
</div>

<link
  rel="stylesheet"
  href="https://cdn.jsdelivr.net/npm/leaflet@1.9.4/dist/leaflet.css"
/>
<script defer src="https://cdn.jsdelivr.net/npm/leaflet@1.9.4/dist/leaflet.js"></script>

<script type="module" is:inline>
  document.addEventListener("DOMContentLoaded", async () => {
    if (!window.L) {
      console.error("[MiniMap] Leaflet niet geladen");
      return;
    }

    const map = L.map("mini-map", {
      scrollWheelZoom: false,
      dragging: true,
      zoomControl: false
    });

    L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
      attribution: "© OpenStreetMap contributors"
    }).addTo(map);

    map.setView([-2.17, -79.922], 6);

    let bounds = null;

    try {
      const res = await fetch(ROUTE_URL);
      const geo = await res.json();
      const layer = L.geoJSON(geo, {
        style: f => {
          const mode = f?.properties?.mode;
          if (mode === "flight") return { color: "#ffb703", weight: 3, opacity: 0.9, dashArray: "6 6" };
          if (mode === "motor") return { color: "#10b981", weight: 3, opacity: 0.9, dashArray: "2 8" };
          return { color: "#023047", weight: 3, opacity: 0.9 };
        }
      }).addTo(map);
      bounds = layer.getBounds();
    } catch (e) {
      console.warn("[MiniMap] Kon route niet laden:", e);
    }

    try {
      const res = await fetch(PLACES_URL);
      const places = await res.json();
      const markers = places
        .filter(p => typeof p.lat === "number" && typeof p.lon === "number")
        .map(p => {
          const m = L.marker([p.lat, p.lon]).addTo(map);
          m.bindTooltip(p.name || "Stop", { direction: "top", offset: [0, -6] });
          return m;
        });
      if (!bounds && markers.length) {
        bounds = L.featureGroup(markers).getBounds();
      }
    } catch (e) {
      console.warn("[MiniMap] Kon places niet laden:", e);
    }

    if (bounds && bounds.isValid()) {
      map.fitBounds(bounds.pad(0.25));
    }
  });
</script>
