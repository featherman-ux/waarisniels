---
// src/components/PhotoGallery.astro
import { Image } from 'astro:assets'; // Use Astro's Image component for optimization

export interface Photo {
  src: string;
  alt?: string;
}

export interface Props {
  photos: Photo[];
}

const { photos } = Astro.props;
---

{photos && photos.length > 0 && (
  <div class="grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-3 gap-4">
    {photos.map((photo: Photo, index: number) => (
      <figure class="relative overflow-hidden rounded-xl shadow-md group bg-gray-100 dark:bg-gray-800/40">
        {/*
 If images are local (in src/assets or referenced via import), use Astro's <Image />
 Example for local images:
 <Image
   src={image.url} // This would be an import reference, e.g., import myImage from '../assets/my-image.jpg'
   alt={image.alt || `Gallery image ${index + 1}`}
   widths={[240, 540, 720]}
   sizes="(max-width: 768px) 100vw, 50vw"
   format="webp"
   class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-110"
   loading="lazy"
 />
        */}
        {/* If images are remote URLs (e.g., from Cloudinary, GitHub raw content) */}
        <img
          src={photo.src}
          alt={photo.alt || `Gallery image ${index + 1}`}
          class="w-full h-auto transition-transform duration-300 group-hover:scale-105"
          loading="lazy"
          decoding="async"
        />
        {/*
 To use Astro <Image /> with remote URLs, ensure astro.config.mjs has `image.domains` or `image.remotePatterns` configured.
 Then, you could use:
 <Image
   src={image.url}
   alt={image.alt |
| `Gallery image ${index + 1}`}
   width={400} // Provide a base width for optimization
   height={400} // Provide a base height for optimization
   format="webp"
   class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-110"
   loading="lazy"
 />
         */}
      </figure>
    ))}
  </div>
)}

<style>
  /* Optional: Add styles for a lightbox or modal if desired,
     though this would likely require client-side JavaScript.
     For a pure Astro/CSS solution, this grid is a good start.
  */
</style>
