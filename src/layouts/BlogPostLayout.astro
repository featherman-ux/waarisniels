
---
import { getCollection, type CollectionEntry } from 'astro:content';
import { Image } from 'astro:assets';
import BaseLayout from './BaseLayout.astro';
import { Comments, ViewCounter, LikeButton } from '../components/EnhancedComponents.jsx';
import { AIChatBot } from '../components/AIComponents.jsx';
import { AISummary } from '../components/AISummary.jsx';
import { FormattedDate } from '../components/FormattedDate';
import PhotoGallery from '../components/PhotoGallery.astro';
import Chip from '../components/Chip.astro';

export interface Props {
  post: CollectionEntry<'blog'>;
}

const { post } = Astro.props;

if (!post || !post.data) {
  throw new Error('`post` or `post.data` is missing in BlogPostLayout.astro');
}

const { title, description, pubDate, image, tags, photos } = post.data;
const { Content } = await post.render();

const dateStr = new Date(pubDate).toLocaleDateString('nl-NL', {
  year: 'numeric', month: 'long', day: 'numeric',
});

const currentPath = Astro.url.pathname;
const siteUrl = import.meta.env.SITE ?? Astro.url.origin ?? 'https://waarisniels.nl';

// --- Schema.org Structured Data ---
const schema = {
  '@context': 'https://schema.org',
  '@type': 'BlogPosting',
  headline: title,
  description: description ?? title,
  image: image?.url ? new URL(image.url, siteUrl).href : undefined,
  author: {
    '@type': 'Person',
    name: post.data.author || 'Niels Veerman', // Default author name
  },
  publisher: {
    '@type': 'Organization',
    name: 'Your Travel Blog', // Your site's name
    logo: {
      '@type': 'ImageObject',
      url: new URL('/favicon.svg', siteUrl).href, // Assuming you have a favicon
    },
  },
  datePublished: pubDate.toISOString(),
  dateModified: pubDate.toISOString(), // Use pubDate if no modified date is available
  mainEntityOfPage: {
    '@type': 'WebPage',
    '@id': Astro.url.href,
  },
};

// --- Get all posts for "Read Next" section using getCollection ---
const allPosts = await getCollection('blog');

const currentTags = tags || [];
const currentUrl = Astro.url.pathname;

// 1. Find posts with shared tags
let relatedPosts = allPosts
  .filter(p => {
    // Exclude current post and drafts
    return p.slug !== post.slug && !p.data.draft;
  })
  .map(p => {
    const sharedTagsCount = p.data.tags?.filter(tag => currentTags.includes(tag)).length || 0;
    return { post: p, sharedTagsCount };
  })
  .filter(item => item.sharedTagsCount > 0)
  // Sort by most shared tags, then by most recent
  .sort((a, b) => b.sharedTagsCount - a.sharedTagsCount || new Date(b.post.data.pubDate).getTime() - new Date(a.post.data.pubDate).getTime())
  .map(item => item.post); // Unwrap to get the post object back

// 2. If not enough related posts, fill with recent posts
if (relatedPosts.length < 2) {
  const recentPosts = allPosts
    .filter(p => {
      // Exclude current post, drafts, and posts already in relatedPosts
      return p.slug !== post.slug && !p.data.draft && !relatedPosts.find(rp => rp.slug === p.slug);
    })
    .sort((a, b) => new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime());
  
  relatedPosts = [...relatedPosts, ...recentPosts];
}

// 3. Limit to 2 posts
const readNextPosts = relatedPosts.slice(0, 2);
---
<script type="application/ld+json" is:inline set:html={JSON.stringify(schema)} />
<BaseLayout title={title} description={description ?? title}>
  <article class="max-w-3xl mx-auto p-6 prose prose-lg dark:prose-invert">
    {image?.url && (
      <figure class="hero rounded-lg overflow-hidden relative mb-6">
        <Image
          src={`/src${image.url}`}
          alt={image.alt ?? title}
          width={1024}
          height={683}
          format="webp"
          quality={80}
          sizes="(max-width: 768px) 100vw, 1024px"
          class="w-full h-auto object-cover"
        />
        <div class="hero-grad absolute inset-0 bg-gradient-to-t from-black/60"></div>
      </figure>
    )}

    <header class="mb-6">
      <h1 class="font-extrabold text-4xl text-[#023047] mb-2">{title}</h1>
      <p class="text-gray-500 mb-4">{dateStr}</p>
      {tags?.length && (
        <div class="flex flex-wrap gap-2 mb-6">
          {tags.map((t) => (
            <Chip text={t} />
          ))}
        </div>
      )}

      <div class="flex items-center gap-4 mb-4">
        <ViewCounter client:idle path={currentPath} apiUrl={siteUrl} />
        <LikeButton client:idle likeKey={currentPath} apiUrl={siteUrl} />
      </div>

      {description && <p class="text-lg text-subtle">{description}</p>}
    </header>

    <AISummary client:load postSlug={post.slug} postContent={post.body} />

    <section class="prose-wrap mb-12">
      <Content />
    </section>

    {photos && <PhotoGallery client:visible photos={photos} />}

    <footer>
      <Comments client:load slug={post.slug} apiUrl={siteUrl} />
    </footer>

    <!-- READ NEXT SECTION -->
    {readNextPosts.length > 0 && (
      <section class="read-next mt-16">
        <h2 class="text-2xl font-bold mb-6">Continue Reading</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          {readNextPosts.map((post) => (
            <a href={`/blog/${post.slug}/`} class="post-card border rounded-lg overflow-hidden transition-all hover:shadow-lg">
              {post.data.image?.url && (
                <Image
                  src={`/src${post.data.image.url}`}
                  alt={post.data.image.alt || ''}
                  width={500}
                  height={300}
                  format="webp"
                  quality={80}
                  class="w-full h-48 object-cover"
                />
              )}
              <div class="p-4">
                <h3 class="font-bold text-lg mb-2">{post.data.title}</h3>
                <p class="text-gray-600 dark:text-gray-300 mb-3">{post.data.description}</p>
                <span class="text-blue-600 dark:text-blue-400 font-medium">Read Post â†’</span>
              </div>
            </a>
          ))}
        </div>
      </section>
    )}

    {/* AI Chatbot floating widget */}
    <AIChatBot apiUrl={siteUrl} client:idle />
  </article>
</BaseLayout>

<style>
  /* Add subtle improvements: larger headings, comfortable reading width */
  article.prose-wrap :global(p) {
    line-height: 1.7;
  }
  figure.hero-grad {
    pointer-events: none;
  }
</style>
