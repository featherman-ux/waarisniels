---
// src/pages/analytics-dashboard.astro
import BaseLayout from '../layouts/BaseLayout.astro';
---
<BaseLayout title="Niels Veerman's Analytics Dashboard">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/leaflet@1.9.4/dist/leaflet.css" slot="head" />
  <script src="https://cdn.jsdelivr.net/npm/apexcharts" slot="head"></script>
  <script is:inline src="https://cdn.jsdelivr.net/npm/leaflet@1.9.4/dist/leaflet.js" slot="head"></script>

  <style>
    :root {
      --bg-light: #f8fafc;
      --card-light: rgba(255, 255, 255, 0.9);
      --card-border-light: #e2e8f0;
      --text-primary-light: #0f172a;
      --text-secondary-light: #64748b;
      --color-blue: #3b82f6;
      --color-green: #22c55e;
      --color-orange: #f97316;
    }
    body {
      background-color: var(--bg-light);
      font-family: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif;
      color: var(--text-primary-light);
    }
.dashboard-container {
      max-width: 1280px;
      margin: 2rem auto;
      padding: 0 1rem;
    }
.glass-card {
      background: var(--card-light);
      border: 1px solid var(--card-border-light);
      border-radius: 1rem;
      box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.05), 0 2px 4px -2px rgb(0 0 0 / 0.05);
      padding: 1.5rem;
      backdrop-filter: blur(8px);
    }
.main-title {
      font-weight: 800;
      font-size: 2.25rem;
      letter-spacing: -0.025em;
    }
.kpi-label {
      font-size: 0.875rem;
      font-weight: 500;
      color: var(--text-secondary-light);
      margin-bottom: 0.25rem;
    }
.kpi-number {
      font-weight: 700;
      font-size: 2.5rem;
      line-height: 1.1;
      color: var(--text-primary-light);
    }
.kpi-subtext {
      font-size: 0.8rem;
      color: var(--text-secondary-light);
      margin-top: 0.25rem;
    }
    #view-map {
      height: 400px;
      border-radius: 0.75rem;
      width: 100%;
      background-color: #e5e7eb;
    }
.chart-container {
      width: 100%;
      height: 300px;
    }
.truncate {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
  </style>

  <div class="dashboard-container">
    <main>
      <header class="text-center mb-12">
        <h1 class="main-title">Niels Veerman's Analytics Dashboard</h1>
        <p class="mt-2 text-lg text-slate-600 max-w-2xl mx-auto">Real insights from your audience â€” clear, modern & professional.</p>
      </header>

      <section class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-6 mb-8">
        <div class="glass-card">
          <div class="kpi-label">Total Views</div>
          <div id="kpi-total-views" class="kpi-number">0</div>
          <div class="kpi-subtext">Overall page views</div>
        </div>
        <div class="glass-card">
          <div class="kpi-label">Unique Visitors</div>
          <div id="kpi-unique-visitors" class="kpi-number">0</div>
          <div class="kpi-subtext">Distinct users</div>
        </div>
        <div class="glass-card">
          <div class="kpi-label">Avg. Time on Page</div>
          <div id="kpi-avg-time" class="kpi-number">0s</div>
          <div class="kpi-subtext">Average session</div>
        </div>
        <div class="glass-card">
          <div class="kpi-label">Bounce Rate</div>
          <div id="kpi-bounce-rate" class="kpi-number">0%</div>
          <div class="kpi-subtext">Single-page visits</div>
        </div>
        <div class="glass-card">
          <div class="kpi-label">Top Referrer</div>
          <div id="kpi-top-referrer" class="kpi-number truncate text-2xl pt-2" title="">N/A</div>
          <div class="kpi-subtext">Source driving highest traffic</div>
        </div>
      </section>

      <section class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
        <div class="glass-card lg:col-span-2">
          <h2 class="text-lg font-semibold mb-4">Views Last 30 Days</h2>
          <div id="time-series-chart" class="chart-container"></div>
        </div>
        <div class="glass-card">
          <h2 class="text-lg font-semibold mb-4">Device Usage</h2>
          <div id="device-chart" class="chart-container"></div>
        </div>
      </section>
      
      <section class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
        <div class="glass-card">
            <h2 class="text-lg font-semibold mb-4">Referrer Breakdown</h2>
            <div id="referrers-chart" class="chart-container"></div>
        </div>
        <div class="glass-card">
            <h2 class="text-lg font-semibold mb-4">Top 10 Posts</h2>
            <div id="top-posts-list" class="space-y-2"></div>
        </div>
      </section>

      <section class="glass-card">
        <h2 class="text-lg font-semibold mb-4">Global Views Map</h2>
        <div id="view-map"></div>
      </section>

      <footer class="text-center mt-12 py-6 text-sm text-slate-500">
        <p>Data provided by Niels Veerman's serverless functions.</p>
        <p class="mt-2">
          <a href="https://github.com/featherman-ux" target="_blank" rel="noopener" class="hover:text-slate-800">GitHub</a> |
          <a href="/about" class="hover:text-slate-800">About</a>
        </p>
        <p class="mt-4">&copy; {new Date().getFullYear()} WaarIsNiels. Powered by Astro</p>
      </footer>
    </main>
  </div>

  <script type="module">
    // --- State and Instances ---
    let timeSeriesChart, deviceChart, referrersChart, mapInstance;
    let coordinateData = null; // Will hold Map<string, { name, lat, lng }>

    // --- Helper Functions ---
    const fmt = (n, decimals = 0) => new Intl.NumberFormat('en-US', {
        notation: 'compact',
        maximumFractionDigits: decimals
    }).format(n);

    async function fetchData(url) {
      try {
        const res = await fetch(url);
        if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
        return await res.json();
      } catch (e) {
        console.error('Failed to fetch dashboard data:', e);
        return null;
      }
    }

    // --- Rendering Functions ---
    function renderKPIs(kpis) {
        document.getElementById('kpi-total-views').textContent = fmt(kpis.totalViews);
        document.getElementById('kpi-unique-visitors').textContent = fmt(kpis.uniqueVisitors);
        document.getElementById('kpi-avg-time').textContent = `${Math.round(kpis.avgTimeOnPage)}s`;
        document.getElementById('kpi-bounce-rate').textContent = `${(kpis.bounceRate * 100).toFixed(1)}%`;
        const referrerEl = document.getElementById('kpi-top-referrer');
        referrerEl.textContent = kpis.topReferrer;
        referrerEl.title = kpis.topReferrer;
    }
    
    function renderTimeSeries(data) {
        const sortedDates = Object.keys(data).sort();
        const seriesData = sortedDates.map(date => data[date]);
        
        const options = {
            chart: { type: 'area', height: '100%', toolbar: { show: false }, zoom: { enabled: false } },
            series:,
            xaxis: { type: 'category', categories: sortedDates, labels: { show: true, rotate: -45, style: { fontSize: '10px' } } },
            yaxis: { labels: { formatter: (val) => fmt(val) } },
            stroke: { curve: 'smooth', width: 2 },
            colors: ['var(--color-blue)'],
            dataLabels: { enabled: false },
            grid: { show: false },
            tooltip: { x: { format: 'dd MMM yyyy' } }
        };

        if (!timeSeriesChart) {
            timeSeriesChart = new ApexCharts(document.getElementById('time-series-chart'), options);
            timeSeriesChart.render();
        } else {
            timeSeriesChart.updateOptions(options);
        }
    }

    function renderDeviceChart(data) {
        const labels = Object.keys(data);
        const series = Object.values(data);
        const options = {
            chart: { type: 'donut', height: '100%' },
            series: series,
            labels: labels,
            colors: ['var(--color-blue)', 'var(--color-green)', 'var(--color-orange)'],
            legend: { position: 'bottom' },
            dataLabels: { enabled: false }
        };
        if (!deviceChart) {
            deviceChart = new ApexCharts(document.getElementById('device-chart'), options);
            deviceChart.render();
        } else {
            deviceChart.updateOptions({...options, series, labels });
        }
    }

    function renderReferrersChart(data) {
        const sorted = Object.entries(data).sort(([, a], [, b]) => b - a);
        const labels = sorted.map(([label]) => label);
        const seriesData = sorted.map(([, value]) => value);
        const options = {
            chart: { type: 'bar', height: '100%', toolbar: { show: false } },
            series:,
            xaxis: { categories: labels },
            plotOptions: { bar: { horizontal: true, borderRadius: 4 } },
            colors: ['var(--color-green)'],
            grid: { show: false },
            dataLabels: { enabled: false }
        };
        if (!referrersChart) {
            referrersChart = new ApexCharts(document.getElementById('referrers-chart'), options);
            referrersChart.render();
        } else {
            referrersChart.updateOptions({...options, series:, xaxis: { categories: labels } });
        }
    }

    function renderTopPosts(posts) {
        const container = document.getElementById('top-posts-list');
        if (!container) return;
        container.innerHTML = posts.map((post, i) => `
            <div class="flex justify-between items-center text-sm py-1">
                <span class="truncate pr-4">${i + 1}. ${post.title}</span>
                <span class="font-semibold text-slate-600">${fmt(post.views)}</span>
            </div>
        `).join('');
    }

    function renderMap(countries) {
        if (!mapInstance) {
            mapInstance = L.map('view-map').setView(, 2);
            L.tileLayer('https://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}{r}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
                subdomains: 'abcd',
                maxZoom: 10
            }).addTo(mapInstance);
        }

        mapInstance.eachLayer(layer => {
            if (layer instanceof L.Circle) {
                mapInstance.removeLayer(layer);
            }
        });

        if (!countries ||!coordinateData) return;
        
        const counts = Object.values(countries);
        if (counts.length === 0) return;
        
        const maxViews = Math.max(...counts);

        Object.entries(countries).forEach(([code, count]) => {
            const coords = coordinateData.get(code.toUpperCase());
            if (coords) {
                const radius = Math.log(count + 1) / Math.log(maxViews + 1) * 1500000;
                const circle = L.circle([coords.lat, coords.lng], {
                    radius: Math.max(radius, 20000),
                    color: 'var(--color-blue)',
                    fillColor: 'var(--color-blue)',
                    fillOpacity: 0.4,
                    weight: 1
                }).addTo(mapInstance);
                circle.bindTooltip(`<b>${coords.name}</b><br>${fmt(count)} views`);
            }
        });
    }

    // --- Initialization ---
    async function loadCoordinates() {
        try {
            const res = await fetch('https://cdn.jsdelivr.net/gh/stefangabos/world_countries/master/data/countries/en/countries.json');
            if (!res.ok) throw new Error('Failed to fetch coordinates');
            const data = await res.json();
            
            coordinateData = new Map();
            data.forEach(c => {
                if (c.alpha2 && c.latitude && c.longitude) {
                    coordinateData.set(c.alpha2.toUpperCase(), {
                        name: c.name,
                        lat: parseFloat(c.latitude),
                        lng: parseFloat(c.longitude)
                    });
                }
            });
        } catch (err) {
            console.error('Error loading country coordinates:', err);
        }
    }

    async function updateDashboard() {
        const data = await fetchData('/api/view');
        if (!data) return;

        renderKPIs(data.kpis);
        renderTimeSeries(data.charts.viewsLast30Days);
        renderDeviceChart(data.charts.deviceUsage);
        renderReferrersChart(data.charts.referrerBreakdown);
        renderTopPosts(data.topPosts);
        renderMap(data.mapData.countries);
    }

    async function init() {
        await loadCoordinates();
        await updateDashboard();
        setInterval(updateDashboard, 60000);
    }

    init();
  </script>
</BaseLayout>