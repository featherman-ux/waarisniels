---
// src/pages/analytics-dashboard.astro
import BaseLayout from '../layouts/BaseLayout.astro';
---
<BaseLayout title="Niels Veerman's Real-Time Analytics">
  <link
    rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/leaflet@1.9.4/dist/leaflet.css"
    slot="head"
  />
  <script src="https://cdn.jsdelivr.net/npm/apexcharts" slot="head"></script>
  <style>
    :root {
      --bg-light: linear-gradient(135deg, #f1f5f9 0%, #e3e7ed 100%);
      --bg-dark: linear-gradient(135deg, #0f172a 0%, #020617 100%);
      --card-light: rgba(255, 255, 255, 0.75);
      --card-dark: rgba(15, 23, 42, 0.7); /* slate-900 */
      --card-border-light: rgba(255, 255, 255, 0.2);
      --card-border-dark: rgba(56, 73, 106, 0.3);
      --text-primary-light: #023047;
      --text-primary-dark: #e2e8f0;
      --text-secondary-light: #475569;
      --text-secondary-dark: #94a3b8;
    }
    .dashboard-container-wrapper {
      font-family: 'Inter', sans-serif;
      background: var(--bg-light);
      min-height: 100vh;
      position: relative;
      overflow-x: hidden;
      padding: 3rem 1.5rem;
    }
    .dark .dashboard-container-wrapper {
      background: var(--bg-dark);
    }

    .glass-card {
      background: var(--card-light);
      backdrop-filter: blur(12px) saturate(180%);
      -webkit-backdrop-filter: blur(12px) saturate(180%);
      border: 1.5px solid var(--card-border-light);
      border-radius: 1rem;
      box-shadow: 0 8px 32px rgba(34,66,108,0.16);
      transition: transform 0.3s, box-shadow 0.3s;
      position: relative;
      overflow: hidden;
    }
    .dark .glass-card {
      background: var(--card-dark);
      border: 1.5px solid var(--card-border-dark);
    }
    .glass-card:hover {
      transform: scale(1.04) translateY(-6px);
      box-shadow: 0 16px 64px rgba(34,66,108,0.24);
    }
    .main-title {
      font-size: 3.5rem;
      font-weight: 900;
      background: linear-gradient(96deg, #00bdd6 10%, #ffb703 70%, #023047 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }
    .main-desc {
      font-size: 1.125rem;
      color: var(--text-secondary-light);
    }
    .dark .main-desc { color: var(--text-secondary-dark); }
    .kpi-label {
      font-size: 1rem;
      font-weight: 600;
      color: var(--text-secondary-light);
      margin-bottom: 4px;
    }
    .dark .kpi-label { color: var(--text-secondary-dark); }
    .kpi-number {
      font-size: 2.75rem; /* Base size for numbers */
      font-weight: 900;
      color: var(--text-primary-light);
      line-height: 1.2;
    }
    .dark .kpi-number { color: var(--text-primary-dark); }

    /* FIX: Specific smaller sizes for text-based KPIs */
    .kpi-text-lg {
      font-size: 1.5rem; /* 24px */
      font-weight: 700;
    }
    .kpi-text-xl {
      font-size: 1.25rem; /* 20px */
      font-weight: 700;
    }
    
    #view-map {
      height: 100%;
      width: 100%;
      border-radius: 0.5rem; 
      overflow: hidden;
    }
    
    /* Chart Dark Mode Styles */
    .dark .apexcharts-tooltip { background: #1e293b !important; border: 1px solid #334155 !important; }
    .dark .apexcharts-tooltip-title, .dark .apexcharts-tooltip-text { color: #f1f5f9 !important; }
    .dark .apexcharts-text, .dark .apexcharts-xaxis-label, .dark .apexcharts-yaxis-label { fill: var(--text-secondary-dark) !important; }
    .dark .apexcharts-legend-text { color: var(--text-secondary-dark) !important; }
    .dark .apexcharts-gridline { stroke: #334155 !important; }
    .dark .leaflet-tile-pane { filter: brightness(0.6) invert(1) contrast(3) hue-rotate(200deg) saturate(0.3) brightness(0.7); }
    .dark .leaflet-popup-content-wrapper, .dark .leaflet-popup-tip { background: #0f172a; color: #f1f5f9; box-shadow: 0 3px 14px rgba(0,0,0,0.4); }
  </style>

  <div class="dashboard-container-wrapper">
    <div class="absolute top-0 left-0 w-1/3 h-1/2 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-full filter blur-3xl opacity-10 dark:opacity-20 pointer-events-none"></div>
    <div class="absolute bottom-0 right-0 w-1/2 h-1/2 bg-gradient-to-br from-blue-900 to-yellow-400 rounded-full filter blur-3xl opacity-10 dark:opacity-15 pointer-events-none"></div>

    <main class="relative max-w-7xl mx-auto z-10">
      
      <button id="theme-toggle" class="absolute -top-4 right-0 z-50 p-2 rounded-lg glass-card text-slate-800 dark:text-slate-200 border-0 shadow-lg">
        <svg id="theme-toggle-light-icon" class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path></svg>
        <svg id="theme-toggle-dark-icon" class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path></svg>
      </button>
      
      <div class="glass-card mb-12 p-4 flex items-center justify-between shadow-none border-0">
        <div class="flex items-center space-x-4">
          <img src="/images/niels.jpg" alt="Niels Veerman" class="w-12 h-12 rounded-full border-2 border-white/50 shadow-lg"/>
          <div>
            <h2 class="font-bold text-lg text-primary-light dark:text-primary-dark">Niels Veerman</h2>
            <p class="text-sm text-secondary-light dark:text-secondary-dark">Data Enthusiast & Travel Storyteller</p>
          </div>
        </div>
        <a href="/about" class="px-4 py-2 rounded-lg text-sm font-semibold text-primary-light dark:text-primary-dark bg-white/60 dark:bg-slate-800/60 hover:bg-white dark:hover:bg-slate-800 transition shadow-sm">About Me</a>
      </div>

      <header class="text-center mb-16">
        <h1 class="main-title text-5xl font-black mb-4 tracking-tight">Niels Veerman’s Real-Time Analytics</h1>
        <p class="main-desc text-lg max-w-3xl mx-auto">
          Monitor blog performance, global reach & user engagement at a glance.
        </p>
      </header>

      <section class="grid grid-cols-1 md:grid-cols-3 gap-8 mb-16">
        <div class="glass-card p-6 flex items-center space-x-4">
          <div class="p-3 bg-blue-100 dark:bg-blue-900/50 rounded-lg shrink-0">
            <svg class="w-6 h-6 text-blue-600 dark:text-blue-300" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path></svg>
          </div>
          <div>
            <h3 class="font-bold text-primary-light dark:text-primary-dark">Top Trend</h3>
            <p class="text-secondary-light dark:text-secondary-dark" id="insight-trend">Analyzing trends...</p>
          </div>
        </div>
        <div class="glass-card p-6 flex items-center space-x-4">
          <div class="p-3 bg-yellow-100 dark:bg-yellow-900/50 rounded-lg shrink-0">
            <svg class="w-6 h-6 text-yellow-600 dark:text-yellow-300" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" d="M9.813 15.904 9 18.75l-.813-2.846a4.5 4.5 0 0 0-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 0 0 3.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 0 0 3.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 0 0-3.09 3.09ZM18.259 8.715 18 9.75l-.259-1.035a3.375 3.375 0 0 0-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 0 0 2.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 0 0 2.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 0 0-2.456 2.456Z"/></svg>
          </div>
          <div>
            <h3 class="font-bold text-primary-light dark:text-primary-dark">AI Insight</h3>
            <p class="text-secondary-light dark:text-secondary-dark" id="insight-ai">Generating summary...</p>
          </div>
        </div>
        <div class="glass-card p-6 flex items-center space-x-4">
          <div class="p-3 bg-orange-100 dark:bg-orange-900/50 rounded-lg shrink-0">
            <svg class="w-6 h-6 text-orange-600 dark:text-orange-300" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path></svg>
          </div>
          <div>
            <h3 class="font-bold text-primary-light dark:text-primary-dark">Spike Alert</h3>
            <p class="text-secondary-light dark:text-secondary-dark" id="insight-spike">Monitoring activity...</p>
          </div>
        </div>
      </section>

      <section class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-8 mb-16">
        <div class="glass-card p-8">
          <div class="flex items-center space-x-3 mb-2">
            <svg class="w-6 h-6 text-slate-400" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M2.036 12.322a1.012 1.012 0 0 1 0-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178Z" /><path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" /></svg>
            <h2 class="kpi-label">Totaal Views</h2>
          </div>
          <div id="kpi-total-views" class="kpi-number text-primary-light dark:text-primary-dark">0</div>
        </div>
        <div class="glass-card p-8">
          <div class="flex items-center space-x-3 mb-2">
           <svg class="w-6 h-6 text-slate-400" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="m3.75 13.5 10.5-11.25L12 10.5h8.25L9.75 21.75 12 13.5H3.75Z" /></svg>
            <h2 class="kpi-label">Top Spike</h2>
          </div>
          <div id="kpi-trend-highlight" class="kpi-number kpi-text-lg truncate text-primary-light dark:text-primary-dark">N/A</div>
        </div>
         <div class="glass-card p-8">
          <div class="flex items-center space-x-3 mb-2">
            <svg class="w-6 h-6 text-slate-400" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M11.48 3.499a.562.562 0 0 1 1.04 0l2.125 5.111a.563.563 0 0 0 .475.31h5.404a.562.562 0 0 1 .321.988l-4.368 3.14a.563.563 0 0 0-.218.66l1.64 5.111a.563.563 0 0 1-.864.614l-4.368-3.14a.563.563 0 0 0-.652 0l-4.368 3.14a.563.563 0 0 1-.864-.614l1.64-5.111a.563.563 0 0 0-.218-.66l-4.368-3.14a.563.563 0 0 1 .321-.988h5.404a.563.563 0 0 0 .475-.31L11.48 3.5Z" /></svg>
            <h2 class="kpi-label">Populairste Post</h2>
          </div>
          <div id="kpi-top-post" class="kpi-number kpi-text-xl truncate text-primary-light dark:text-primary-dark" title="Loading...">Loading...</div>
        </div>
        <div class="glass-card p-8">
          <div class="flex items-center space-x-3 mb-2">
            <svg class="w-6 h-6 text-slate-400" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M12 21a9.004 9.004 0 0 0 8.716-6.747M12 21a9.004 9.004 0 0 1-8.716-6.747M12 21c1.35 0 2.463-.153 3.561-.438m-7.122 0A8.966 8.966 0 0 1 12 2.25c1.35 0 2.463.153 3.561.438m0 13.062a8.966 8.966 0 0 1-7.122 0M12 2.25c-4.602 0-8.48 3.067-9.807 7.218c.06.054.12.11.18.168m19.254 0a8.966 8.966 0 0 0-9.807-7.218c.06-.054.12-.11.18-.168M3 12h18M12 2.25V12m0 9.75V12" /></svg>
            <h2 class="kpi-label">Top Land</h2>
          </div>
          <div id="kpi-top-country" class="kpi-number kpi-text-lg truncate text-primary-light dark:text-primary-dark">N/A</div>
        </div>
        <div class="glass-card p-8">
            <div class="flex items-center space-x-3 mb-2">
            <svg class="w-6 h-6 text-slate-400" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" /></svg>
            <h2 class="kpi-label">Laatste Bezoek</h2>
          </div>
          <div id="kpi-live-event" class="kpi-number kpi-text-lg text-primary-light dark:text-primary-dark">N/A</div>
        </div>
      </section>

      <section class="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-16">
        <div class="glass-card p-6 col-span-1 min-h-[24rem] h-full relative">
          <h2 class="text-2xl font-bold text-primary-light dark:text-primary-dark mb-4 tracking-tight">🌍 Views per Land</h2>
          <div id="view-map" class="h-[calc(100%-48px)] rounded-lg overflow-hidden"></div>
        </div>
        <div class="col-span-2 space-y-8">
          <div class="glass-card h-80 p-6">
            <h2 class="text-2xl font-bold text-primary-light dark:text-primary-dark mb-4 tracking-tight">📈 Views Trend (30 dagen)</h2>
            <div id="time-series-chart" class="h-full"></div>
          </div>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-8 h-80">
            <div class="glass-card p-6">
              <h2 class="text-2xl font-bold text-primary-light dark:text-primary-dark mb-4 tracking-tight">📱 Apparaten</h2>
              <div id="device-chart" class="h-40"></div>
            </div>
            <div class="glass-card p-6">
              <h2 class="text-2xl font-bold text-primary-light dark:text-primary-dark mb-4 tracking-tight">🔗 Verkeersbronnen</h2>
              <div id="referrers-chart" class="h-40"></div>
            </div>
          </div>
        </div>
      </section>

      <div class="glass-card mb-16 p-8">
        <h2 class="text-2xl font-bold text-primary-light dark:text-primary-dark mb-6 tracking-tight">🏆 Top 10 Posts</h2>
        <div id="popular-posts" class="space-y-3"></div>
      </div>

      <footer class="text-center mt-16 pt-8 border-t border-slate-300 dark:border-slate-700">
        <p class="text-secondary-light dark:text-secondary-dark">Data provided by Niels Veerman's serverless functions.</p>
         <div class="flex justify-center space-x-4 mt-4">
           <a href="https://github.com/featherman-ux" target="_blank" rel="noopener" class="text-slate-500 hover:text-orange-500 transition">GitHub</a>
           <a href="#" class="text-slate-500 hover:text-orange-500 transition">LinkedIn</a>
           <a href="/about" class="text-slate-500 hover:text-orange-500 transition">About</a>
         </div>
      </footer>

    </main>
  </div>

  <script type="module">
    import * as L from 'https://cdn.jsdelivr.net/npm/leaflet@1.9.4/dist/leaflet-src.esm.js';

    // Chart & Map instances
    let timeSeriesChart, deviceChart, referrersChart, mapInstance;
    let mapLayers = []; // Keep track of map circles
    let coordinateData = null; // Store fetched coordinates globally

    // Color palette
    const COLORS = {
      primary: '#023047',
      secondary: '#ffb703',
      accent: '#fb8500'
    };

    // Helpers
    const fmt = n => (n > 999 ? `${(n/1000).toFixed(1)}k` : String(n));
    const ago = d => {
      if (!d) return 'N/A';
      const s = Math.floor((Date.now() - new Date(d))/1000);
      if (s < 60) return `${s}s geleden`;
      const m = Math.floor(s/60);
      if (m < 60) return `${m}m geleden`;
      const h = Math.floor(m/60);
      return h < 24 ? `${h}u geleden` : `${Math.floor(h/24)}d geleden`;
    };

    // --- NEW: Count-up Animator ---
    function animateCountUp(element, endValue) {
      if (!element) return;
      const startValueText = element.textContent.replace(/[k,]/g, '') || '0';
      const startValue = parseFloat(startValueText) || 0;

      if (startValue === endValue) return; // No change

      const duration = 1200; // Animation duration in ms
      let startTime = null;

      function animationStep(timestamp) {
        if (!startTime) startTime = timestamp;
        const progress = Math.min((timestamp - startTime) / duration, 1);
        const easeOutProgress = progress * (2 - progress); // ease-out quad
        const currentValue = Math.floor(easeOutProgress * (endValue - startValue) + startValue);
        
        element.textContent = fmt(currentValue);

        if (progress < 1) {
          requestAnimationFrame(animationStep);
        } else {
          element.textContent = fmt(endValue); // Ensure it lands on the exact final number
        }
      }
      requestAnimationFrame(animationStep);
    }
    
    // --- NEW: Dark Mode Toggle Logic ---
    const themeToggle = document.getElementById('theme-toggle');
    const lightIcon = document.getElementById('theme-toggle-light-icon');
    const darkIcon = document.getElementById('theme-toggle-dark-icon');
    
    function setDarkMode(isDark) {
      document.documentElement.classList.toggle('dark', isDark);
      lightIcon?.classList.toggle('hidden', !isDark);
      darkIcon?.classList.toggle('hidden', isDark);
      localStorage.setItem('theme', isDark ? 'dark' : 'light');
      
      // Force leaflet map to redraw tiles for dark mode
      if(mapInstance) mapInstance.invalidateSize();
      
      // Force charts to redraw with new theme options
      const chartTheme = getChartTheme();
      if (timeSeriesChart) timeSeriesChart.updateOptions(chartTheme.time);
      if (deviceChart) deviceChart.updateOptions(chartTheme.device);
      if (referrersChart) referrersChart.updateOptions(chartTheme.referrers);
    }
    
    // Check saved preference on load
    const prefersDark = localStorage.getItem('theme') === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches);
    setDarkMode(prefersDark);

    themeToggle.addEventListener('click', () => {
      setDarkMode(!document.documentElement.classList.contains('dark'));
    });


    // --- API Data Fetching ---
    async function fetchData(endpoint) {
      try {
        const res = await fetch(endpoint);
        if (!res.ok) { 
          console.error(`Failed to fetch from ${endpoint}`);
          return null; 
        }
        return res.json();
      } catch (e) {
        console.error(`Fetch error for ${endpoint}:`, e);
        return null;
      }
    }

    // --- Render Functions ---
    
    function renderKPIs(total, posts, countries, perDay, latest) {
      const spike = Object.entries(perDay).reduce(
        (best, [day, v]) => (v > best.v ? { day, v } : best),
        { day: 'N/A', v: 0 }
      );
      
      const topCountryEntry = Object.entries(countries).sort((a,b)=>b[1]-a[1])[0];
      const topCountryValue = topCountryEntry ? `${topCountryEntry[0]} (${fmt(topCountryEntry[1])})` : 'N/A';
      
      // Animate the main numeric KPI
      animateCountUp(document.querySelector("#kpi-total-views .kpi-number"), total);

      // Set the text for the other KPIs
      const spikeEl = document.querySelector("#kpi-trend-highlight .kpi-number");
      if (spikeEl) spikeEl.textContent = spike.v > 0 ? `${fmt(spike.v)} (${spike.day})` : 'N/A';
      
      const postEl = document.querySelector("#kpi-top-post .kpi-number");
      if (postEl) {
        postEl.textContent = posts[0]?.title || 'N/A';
        postEl.title = posts[0]?.title || 'N/A'; 
      }

      const countryEl = document.querySelector("#kpi-top-country .kpi-number");
      if (countryEl) countryEl.textContent = topCountryValue;

      const eventEl = document.querySelector("#kpi-live-event .kpi-number");
      if (eventEl) eventEl.textContent = ago(latest?.timestamp);
    }

    // Chart Theme Helper
    function getChartTheme() {
      const isDark = document.documentElement.classList.contains('dark');
      const labelColor = isDark ? '#94a3b8' : '#64748b';
      const gridColor = isDark ? '#334155' : '#e2e8f0';
      const theme = isDark ? 'dark' : 'light';
      
      const baseLabelStyle = { style: { colors: labelColor, fontWeight: 600 } };
      
      return {
        time: {
          tooltip: { theme },
          grid: { borderColor: gridColor },
          xaxis: { categories: [], labels: baseLabelStyle },
          yaxis: { labels: baseLabelStyle }
        },
        device: {
          tooltip: { theme },
          legend:{ labels: { colors: [labelColor] }, fontWeight: 600, position: 'bottom' }
        },
        referrers: {
          tooltip: { theme },
          grid: { borderColor: gridColor },
          xaxis: { categories: [], labels: baseLabelStyle },
          yaxis: { labels: baseLabelStyle }
        }
      };
    }

    function renderTimeSeries(data) {
      const dates = Object.keys(data).sort().slice(-30);
      const series = [{ name:'Views', data:dates.map(d=>data[d] || 0) }];
      const themeOpts = getChartTheme().time;
      
      const opts = {
        ...themeOpts,
        series,
        xaxis: { ...themeOpts.xaxis, categories: dates },
        chart:{ type:'area', toolbar:{ show:false }, animations: { easing: 'easeOut', speed: 400 } },
        colors:[COLORS.primary],
        stroke:{ curve:'smooth', width:3 }, 
        fill:{ type:'gradient', gradient:{ opacityFrom:0.5, opacityTo:0.1 } },
        dataLabels:{ enabled:false },
      };
      if (!timeSeriesChart) {
        timeSeriesChart = new ApexCharts(document.getElementById('time-series-chart'), opts);
        timeSeriesChart.render();
      } else {
        timeSeriesChart.updateOptions({ ...themeOpts, series, xaxis:{ categories:dates } });
      }
    }
    
    function renderDeviceChart(data) {
      const labels = Object.keys(data);
      const series = Object.values(data);
      const themeOpts = getChartTheme().device;
      
      const opts = { 
        ...themeOpts,
        series, 
        labels, 
        chart:{ type:'donut', height:200 }, 
        colors:[COLORS.primary, COLORS.secondary, COLORS.accent],
        legend: { ...themeOpts.legend }
      };
      if (!deviceChart) {
        deviceChart = new ApexCharts(document.getElementById('device-chart'), opts);
        deviceChart.render();
      } else {
        deviceChart.updateOptions({ ...themeOpts, series, labels });
      }
    }
    
    function renderReferrersChart(data) {
      const sorted = Object.entries(data).sort((a,b)=>b[1]-a[1]).slice(0,7);
      const categories = sorted.map(([k])=>k);
      const series = [{ data:sorted.map(([,v])=>v) }];
      const themeOpts = getChartTheme().referrers;

      const opts = { 
        ...themeOpts,
        series, 
        chart:{ type:'bar', height:200 }, 
        xaxis: { ...themeOpts.xaxis, categories },
        colors:[COLORS.secondary], 
        plotOptions:{ bar:{ borderRadius:6, horizontal: true } },
      };
      if (!referrersChart) {
        referrersChart = new ApexCharts(document.getElementById('referrers-chart'), opts);
        referrersChart.render();
      } else {
        referrersChart.updateOptions({ ...themeOpts, series, xaxis:{ categories } });
      }
    }

    // --- FIXED MAP FUNCTION (Redraws circles on update) ---
    function renderMap(countries) {
      if (!coordinateData) return; // Wait for coordinates

      if (!mapInstance) { // Initialize map ONCE
        mapInstance = L.map('view-map',{ zoomControl:false }).setView([20,0],2);
        L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png').addTo(mapInstance);
      }

      // Clear all old circle layers
      mapLayers.forEach(layer => layer.remove());
      mapLayers = []; // Reset the array

      // Draw new circles
      Object.entries(countries).forEach(([code,v])=>{
        const info = coordinateData.get(code.toUpperCase()); // <-- Use .get() on the Map
        if (!info) return; // Skip if no coordinate match
        
        const circle = L.circle([info.lat, info.lng], { // <-- Use info.lat, info.lng
          radius: Math.sqrt(v)*40000,
          color: COLORS.secondary,
          fillColor: COLORS.secondary,
          fillOpacity: 0.6,
          weight: 1
        });
        
        circle.addTo(mapInstance).bindPopup(`<b>${info.name}</b><br>${fmt(v)} views`);
        mapLayers.push(circle); // Add to our list to be cleared next time
      });
    }

    // Render popular posts (updated styles)
    function renderPopular(posts) {
      const container = document.getElementById('popular-posts');
      container.innerHTML = posts.slice(0,10).map((p,i)=>`
        <div class="flex justify-between items-center p-4 bg-white/50 dark:bg-slate-800/30 backdrop-filter backdrop-blur-sm rounded-lg shadow-inner">
          <div class="truncate text-primary-light dark:text-primary-dark"><strong>${i+1}.</strong> ${p.title}</div>
          <div class="font-extrabold text-primary-light dark:text-primary-dark ml-4">${fmt(p.views)}</div>
        </div>
      `).join('');
    }

    // Process all data and call renderers
    async function updateDashboard(data) {
      if (!data || !data.allViewsData) {
        console.warn("Update called with no data. API might be empty or failing.");
        return; 
      }
      
      const { allViewsData, latestEvents } = data;
      const postsArr = Object.entries(allViewsData).map(([path,d])=>({
        title: path.replace(/^\/blog\//,''), views: d?.total||0
      })).sort((a,b)=>b.views-a.views);
      
      const total = postsArr.reduce((s,p)=>s+p.views,0);
      const countries = {}, devices = {}, referrers = {}, perDay = {};

      Object.values(allViewsData).forEach(d => {
        if (typeof d !== 'object' || d === null) return; 

        Object.entries(d.countries||{}).forEach(([c,v])=>countries[c]=(countries[c]||0) + (v||0));
        Object.entries(d.devices||{}).forEach(([dvc,v])=>devices[dvc]=(devices[dvc]||0) + (v||0));
        Object.entries(d.referrers||{}).forEach(([r,v])=>referrers[r]=(referrers[r]||0) + (v||0));
        
        (d.timestamps || []).forEach(ts => {
          const timestampString = (typeof ts === 'object' && ts !== null) ? ts.time : ts;
          if (timestampString && typeof timestampString === 'string') {
            const day = timestampString.split('T')[0];
            perDay[day] = (perDay[day] || 0) + 1;
          }
        });
      }); 

      // Render everything
      renderKPIs(total, postsArr, countries, perDay, latestEvents ? latestEvents[0] : null);
      renderPopular(postsArr);
      renderTimeSeries(perDay);
      renderDeviceChart(devices);
      renderReferrersChart(referrers);
      renderMap(countries); // This will now redraw circles on every update

      // --- NEW: Update AI Insights ---
      const insightData = { referrers, topPost: postsArr[0] };
      fetchAiInsight(insightData).then(insight => {
         const el = document.getElementById('insight-ai');
         if (el) el.textContent = insight;
      });
       // Update the other insight cards
      const trendEl = document.getElementById('insight-trend');
      if (trendEl && postsArr[0]) trendEl.textContent = `Top post is "${postsArr[0].title}".`;
      const topCountry = Object.entries(countries).sort((a,b)=>b[1]-a[1])[0];
      const spikeEl = document.getElementById('insight-spike');
      if (spikeEl && topCountry) spikeEl.textContent = `Top traffic source is ${topCountry[0]}.`;
    }

    // Main initialization: polling only
    async function init() {
      // First, fetch the map data and store it so we only do it once
      try {
        // --- THIS IS THE FIXED URL for a reliable data source ---
        const res = await fetch('https://unpkg.com/world-countries@5.0.0/data/countries.json');
        if (!res.ok) throw new Error('Failed to fetch coordinate file');
        const countryData = await res.json();
        // Convert the giant array to a fast Map lookup
        coordinateData = new Map(countryData.map(c => [
          c.cca2, // The 2-letter code (e.g., "PE")
          { name: c.name.common, lat: c.latlng[0], lng: c.latlng[1] } // The data we need
        ]));

      } catch (e) {
         console.error("CRITICAL: Failed to load map coordinates. Map will not work.", e);
      }
      
      // Now, fetch the first set of analytics data
      const initialData = await fetchData('/api/view');
      if (initialData) {
        updateDashboard(initialData);
      }
      
      // Keep polling for new data every 15 seconds
      setInterval(async () => {
        console.log('Fetching fresh dashboard data...');
        const fresh = await fetchData('/api/view');
        if (fresh) updateDashboard(fresh);
      }, 15000);
    }

    // Run it
    init();
  </script>
</BaseLayout>