---
// src/pages/analytics-dashboard.astro
import BaseLayout from '../layouts/BaseLayout.astro';
---
<BaseLayout title="Glassmorphic Analytics Dashboard">
  <link
    rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/leaflet@1.9.4/dist/leaflet.css"
    slot="head"
  />
  <script src="https://cdn.jsdelivr.net/npm/apexcharts" slot="head"></script>
  <style>
    /* Container */
    .dashboard-container {
      font-family: 'Inter', sans-serif;
      background: linear-gradient(135deg,#f1f5f9 0%,#e3e7ed 100%);
      min-height: 100vh;
      position: relative;
      overflow-x: hidden;
    }

    /* Glassmorphic Card */
    .glass-card {
      background: rgba(255,255,255,0.75);
      backdrop-filter: blur(12px) saturate(180%);
      border: 1.5px solid rgba(255,255,255,0.2);
      border-radius: 1rem;
      box-shadow: 0 8px 32px rgba(34,66,108,0.16);
      transition: transform 0.3s, box-shadow 0.3s;
      position: relative;
      overflow: hidden;
    }
    .glass-card:hover {
      transform: scale(1.04) translateY(-6px);
      box-shadow: 0 16px 64px rgba(34,66,108,0.24);
    }

    /* Title & Description */
    .main-title {
      font-size: 3.5rem;
      font-weight: 900;
      background: linear-gradient(96deg, #00bdd6 10%, #ffb703 70%, #023047 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }
    .main-desc {
      font-size: 1.125rem;
      color: #475569;
    }

    /* KPI Styling */
    .kpi-label {
      font-size: 1rem;
      font-weight: 600;
      color: #64748b;
      margin-bottom: 4px;
    }
    .kpi-number {
      font-size: 2.75rem;
      font-weight: 900;
      color: #023047;
      transition: color 0.6s, transform 0.3s;
    }
    .kpi-number.animate {
      color: #ffb703;
      transform: scale(1.1);
    }

    /* Map Card */
    #view-map {
      border-radius: 1rem;
      overflow: hidden;
      box-shadow: 0 4px 24px rgba(2,48,71,0.1);
    }

    /* Decorative Blurs */
    .absolute { position: absolute; }
    .blur-3xl { filter: blur(3rem); }
    .opacity-20 { opacity: 0.2; }
    .opacity-15 { opacity: 0.15; }
  </style>

  <main class="dashboard-container p-6 md:p-12 xl:p-20">
    <div class="absolute top-8 left-8 w-24 h-24 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-full blur-3xl opacity-20"></div>
    <div class="absolute bottom-12 right-8 w-20 h-20 bg-gradient-to-br from-blue-900 to-yellow-400 rounded-full blur-3xl opacity-15"></div>

    <header class="text-center mb-16">
      <h1 class="main-title mb-4">üåü Glassmorphic Analytics Dashboard</h1>
      <p class="main-desc mb-6">Live insights, interactive filters, AI-driven highlights, and near real-time updates.</p>
    </header>

    <section class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-10 mb-16">
      <div id="kpi-total-views" class="glass-card p-6"></div>
      <div id="kpi-trend-highlight" class="glass-card p-6"></div>
      <div id="kpi-top-post" class="glass-card p-6"></div>
      <div id="kpi-top-country" class="glass-card p-6"></div>
      <div id="kpi-live-event" class="glass-card p-6"></div>
    </section>

    <section class="grid grid-cols-1 lg:grid-cols-3 gap-10 mb-16">
      <div class="glass-card p-0 h-96 relative">
        <h2 class="text-xl font-bold text-[#023047] p-4">üåç Views per Land</h2>
        <div id="view-map" class="h-[340px]"></div>
      </div>
      <div class="col-span-2 grid grid-rows-2 gap-8">
        <div class="glass-card h-80 p-6">
          <h2 class="text-xl font-bold text-[#023047] mb-4">üìà Views Trend (30 dagen)</h2>
          <div id="time-series-chart" class="h-full"></div>
        </div>
        <div class="glass-card h-80 grid grid-cols-2 gap-8 p-6">
          <div>
            <h2 class="text-xl font-bold text-[#023047] mb-4">üì± Apparaten</h2>
            <div id="device-chart" class="h-40"></div>
          </div>
          <div>
            <h2 class="text-xl font-bold text-[#023047] mb-4">üîó Verkeersbronnen</h2>
            <div id="referrers-chart" class="h-40"></div>
          </div>
        </div>
      </div>
    </section>

    <div class="glass-card mb-16 p-6 border border-gray-200">
      <h2 class="text-xl font-bold text-[#023047] mb-4">üèÜ Top 10 Posts</h2>
      <div id="popular-posts" class="space-y-2"></div>
    </div>
  </main>

  <script type="module">
    import * as L from 'https://cdn.jsdelivr.net/npm/leaflet@1.9.4/dist/leaflet-src.esm.js';

    // Chart & Map instances
    let timeSeriesChart, deviceChart, referrersChart, mapInstance;

    // Color palette
    const COLORS = {
      primary: '#023047',
      secondary: '#ffb703',
      accent: '#fb8500'
    };

    // Helpers
    const fmt = n => (n > 999 ? `${(n/1000).toFixed(1)}k` : String(n));
    const ago = d => {
      if (!d) return 'N/A';
      const s = Math.floor((Date.now() - new Date(d))/1000);
      if (s < 60) return `${s}s geleden`;
      const m = Math.floor(s/60);
      if (m < 60) return `${m}m geleden`;
      const h = Math.floor(m/60);
      return h < 24 ? `${h}u geleden` : `${Math.floor(h/24)}d geleden`;
    };

    // Fetch analytics data
    async function fetchData() {
      const res = await fetch('/api/view');
      if (!res.ok) {
        console.error('Failed to fetch analytics data');
        return null;
      }
      return res.json();
    }

    // Render KPI cards, now accepts perDay
    function renderKPIs(total, posts, countries, perDay, latest) {
      const spike = Object.entries(perDay).reduce(
        (best, [day, v]) => (v > best.v ? { day, v } : best),
        { day: null, v: -Infinity }
      );
      
      const topCountryEntry = Object.entries(countries).sort((a,b)=>b[1]-a[1])[0];

      const items = [
        { id:'kpi-total-views', label:'Totaal Views', value: fmt(total) },
        { id:'kpi-trend-highlight', label:'Top Spike',
          value: spike.v > 0 ? `${fmt(spike.v)} views on ${spike.day}` : 'N/A'
        },
        { id:'kpi-top-post', label:'Populairste Post', value: posts[0]?.title || 'N/A' },
        { id:'kpi-top-country', label:'Top Land',
          value: topCountryEntry ? `${topCountryEntry[0]} (${fmt(topCountryEntry[1])})` : 'N/A'
        },
        { id:'kpi-live-event', label:'Laatste Bezoek', value: ago(latest?.timestamp) }
      ];
      items.forEach(({id,label,value})=>{
        const el = document.getElementById(id);
        if (el) {
          el.innerHTML = `<div class="kpi-label">${label}</div><div class="kpi-number">${value}</div>`;
        }
      });
    }

    // Render charts
    function renderTimeSeries(data) {
      const dates = Object.keys(data).sort().slice(-30);
      const series = [{ name:'Views', data:dates.map(d=>data[d] || 0) }];
      const opts = {
        chart:{ type:'area', toolbar:{ show:false }, animations: { easing: 'easeOut', speed: 400 } },
        series, xaxis:{ categories:dates, labels: { style: { colors: '#64748b', fontWeight:600 } } },
        yaxis: { labels: { style: { colors: '#64748b', fontWeight:600 } } },
        colors:[COLORS.primary],
        stroke:{ curve:'smooth', width:3 }, fill:{ type:'gradient', gradient:{ opacityFrom:0.5, opacityTo:0.1 } },
        grid:{ borderColor:'#e2e8f0', strokeDashArray:4 }, dataLabels:{ enabled:false }
      };
      if (!timeSeriesChart) {
        timeSeriesChart = new ApexCharts(document.getElementById('time-series-chart'), opts);
        timeSeriesChart.render();
      } else {
        timeSeriesChart.updateOptions({ series, xaxis:{ categories:dates } });
      }
    }
    function renderDeviceChart(data) {
      const labels = Object.keys(data);
      const series = Object.values(data);
      const opts = { chart:{ type:'donut', height:200 }, series, labels, colors:[COLORS.primary, COLORS.secondary, COLORS.accent], legend:{ position:'bottom', fontWeight:600 } };
      if (!deviceChart) {
        deviceChart = new ApexCharts(document.getElementById('device-chart'), opts);
        deviceChart.render();
      } else {
        deviceChart.updateOptions({ series, labels });
      }
    }
    function renderReferrersChart(data) {
      const sorted = Object.entries(data).sort((a,b)=>b[1]-a[1]).slice(0,7);
      const categories = sorted.map(([k])=>k);
      const series = [{ data:sorted.map(([,v])=>v) }];
      const opts = { chart:{ type:'bar', height:200 }, series, xaxis:{ categories, labels: { style: { colors: '#64748b', fontWeight:600 } } }, colors:[COLORS.secondary], plotOptions:{ bar:{ borderRadius:6 } }, grid:{ borderColor:'#e2e8f0', strokeDashArray: 4 }};
      if (!referrersChart) {
        referrersChart = new ApexCharts(document.getElementById('referrers-chart'), opts);
        referrersChart.render();
      } else {
        referrersChart.updateOptions({ series, xaxis:{ categories } });
      }
    }

    // Render map once
    function renderMap(countries) {
      if (mapInstance) return; // Only render map once
      mapInstance = L.map('view-map',{ zoomControl:false }).setView([20,0],2);
      L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png').addTo(mapInstance);
      
      fetch('https://cdn.jsdelivr.net/npm/countries-coordinates@1.0.3/countries.json')
        .then(r=>r.json())
        .then(coords=>{
          Object.entries(countries).forEach(([code,v])=>{
            const info = coords[code.toUpperCase()];
            if (!info) return;
            L.circle([info.latitude, info.longitude], {
              radius: Math.sqrt(v)*40000,
              color: COLORS.secondary,
              fillColor: COLORS.secondary,
              fillOpacity: 0.6,
              weight: 1
            }).addTo(mapInstance).bindPopup(`<b>${info.name}</b><br>${fmt(v)} views`);
          });
        })
        .catch(e => console.error("Failed to load map coordinates:", e)); // Added safety catch
    }

    // Render popular posts
    function renderPopular(posts) {
      const container = document.getElementById('popular-posts');
      container.innerHTML = posts.slice(0,10).map((p,i)=>`
        <div class="flex justify-between items-center p-4 bg-white bg-opacity-50 backdrop-filter backdrop-blur-sm rounded-lg shadow">
          <div><strong>${i+1}.</strong> ${p.title}</div>
          <div class="font-extrabold text-[#023047]">${fmt(p.views)}</div>
        </div>
      `).join('');
    }

    // Process all data and call renderers
    function updateDashboard(data) {
      if (!data || !data.allViewsData) {
        console.warn("Update called with no data. API might be empty or failing.");
        return; 
      }
      
      const { allViewsData, latestEvents } = data;
      const postsArr = Object.entries(allViewsData).map(([path,d])=>({
        title: path.replace(/^\/blog\//,''), views: d?.total||0 // Safety check for 'd'
      })).sort((a,b)=>b.views-a.views);
      
      const total = postsArr.reduce((s,p)=>s+p.views,0);
      const countries = {}, devices = {}, referrers = {}, perDay = {};

      // This is the loop for all aggregated data
      Object.values(allViewsData).forEach(d => {
        // Extra safety check: ensure 'd' is a valid object
        if (typeof d !== 'object' || d === null) return; 

        Object.entries(d.countries||{}).forEach(([c,v])=>countries[c]=(countries[c]||0) + (v||0));
        Object.entries(d.devices||{}).forEach(([dvc,v])=>devices[dvc]=(devices[dvc]||0) + (v||0));
        Object.entries(d.referrers||{}).forEach(([r,v])=>referrers[r]=(referrers[r]||0) + (v||0));
        
        // This is the fix for mixed/bad data from our last error
        (d.timestamps || []).forEach(ts => {
          const timestampString = (typeof ts === 'object' && ts !== null) ? ts.time : ts;
          if (timestampString && typeof timestampString === 'string') {
            const day = timestampString.split('T')[0];
            perDay[day] = (perDay[day] || 0) + 1;
          }
        });
      }); // <-- THIS WAS THE MISSING CLOSING BRACE/PARENTHESIS

      // Now we call the render functions (outside the loop)
      renderKPIs(total, postsArr, countries, perDay, latestEvents ? latestEvents[0] : null);
      renderPopular(postsArr);
      renderTimeSeries(perDay);
      renderDeviceChart(devices);
      renderReferrersChart(referrers);
      renderMap(countries);
    }

    // Main initialization: polling only
    async function init() {
      const initialData = await fetchData();
      if (initialData) {
        updateDashboard(initialData);
      }
      
      // Keep polling for new data
      setInterval(async () => {
        console.log('Fetching fresh dashboard data...');
        const fresh = await fetchData();
        if (fresh) updateDashboard(fresh);
      }, 15000);
    }

    // Run it
    init();
  </script>
</BaseLayout>