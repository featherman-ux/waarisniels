---
// src/pages/analytics-dashboard.astro
import BaseLayout from '../layouts/BaseLayout.astro';
---
<BaseLayout title="Niels Veerman's Real-Time Analytics">
  <link
    rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/leaflet@1.9.4/dist/leaflet.css"
    slot="head"
  />
  <script src="https://cdn.jsdelivr.net/npm/apexcharts" slot="head"></script>
  <style>
    :root {
      --bg-light: linear-gradient(135deg, #f1f5f9 0%, #e3e7ed 100%);
      --bg-dark: linear-gradient(135deg, #0f172a 0%, #020617 100%);
      --card-light: rgba(255, 255, 255, 0.75);
      --card-dark: rgba(15, 23, 42, 0.7);
      --card-border-light: rgba(255, 255, 255, 0.2);
      --card-border-dark: rgba(56, 73, 106, 0.3);
      --text-primary-light: #023047;
      --text-primary-dark: #e2e8f0;
      --text-secondary-light: #475569;
      --text-secondary-dark: #94a3b8;
    }
    
    .dashboard-container-wrapper {
      font-family: 'Inter', sans-serif;
      background: var(--bg-light);
      min-height: 100vh;
      position: relative;
      overflow-x: hidden;
      padding: 1rem;
    }
    
    @media (min-width: 768px) {
      .dashboard-container-wrapper {
        padding: 2rem 1.5rem;
      }
    }
    
    @media (min-width: 1024px) {
      .dashboard-container-wrapper {
        padding: 3rem 1.5rem;
      }
    }
    
    .dark .dashboard-container-wrapper {
      background: var(--bg-dark);
    }

    .glass-card {
      background: var(--card-light);
      backdrop-filter: blur(12px) saturate(180%);
      -webkit-backdrop-filter: blur(12px) saturate(180%);
      border: 1.5px solid var(--card-border-light);
      border-radius: 1rem;
      box-shadow: 0 8px 32px rgba(34,66,108,0.16);
      transition: transform 0.3s, box-shadow 0.3s;
      position: relative;
      overflow: hidden;
    }
    
    .dark .glass-card {
      background: var(--card-dark);
      border: 1.5px solid var(--card-border-dark);
    }
    
    .glass-card:hover {
      transform: scale(1.02) translateY(-2px);
      box-shadow: 0 16px 64px rgba(34,66,108,0.24);
    }
    
    @media (min-width: 1024px) {
      .glass-card:hover {
        transform: scale(1.04) translateY(-6px);
      }
    }
    
    .main-title {
      font-size: 2rem;
      font-weight: 900;
      background: linear-gradient(96deg, #00bdd6 10%, #ffb703 70%, #023047 100%);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      line-height: 1.2;
    }
    
    @media (min-width: 768px) {
      .main-title {
        font-size: 3rem;
      }
    }
    
    @media (min-width: 1024px) {
      .main-title {
        font-size: 3.5rem;
      }
    }
    
    .main-desc {
      font-size: 1rem;
      color: var(--text-secondary-light);
    }
    
    @media (min-width: 768px) {
      .main-desc {
        font-size: 1.125rem;
      }
    }
    
    .dark .main-desc { color: var(--text-secondary-dark); }
    
    .kpi-label {
      font-size: 0.875rem;
      font-weight: 600;
      color: var(--text-secondary-light);
      margin-bottom: 4px;
    }
    
    @media (min-width: 768px) {
      .kpi-label {
        font-size: 1rem;
      }
    }
    
    .dark .kpi-label { color: var(--text-secondary-dark); }
    
    .kpi-number {
      font-size: 1.875rem;
      font-weight: 900;
      color: var(--text-primary-light);
      line-height: 1.2;
    }
    
    @media (min-width: 768px) {
      .kpi-number {
        font-size: 2.25rem;
      }
    }
    
    @media (min-width: 1024px) {
      .kpi-number {
        font-size: 2.75rem;
      }
    }
    
    .dark .kpi-number { color: var(--text-primary-dark); }

    .kpi-text-lg {
      font-size: 1.125rem;
      font-weight: 700;
      line-height: 1.5;
    }
    
    @media (min-width: 768px) {
      .kpi-text-lg {
        font-size: 1.25rem;
        line-height: 1.75rem;
      }
    }
    
    @media (min-width: 1024px) {
      .kpi-text-lg {
        font-size: 1.5rem;
        line-height: 2rem;
      }
    }
    
    .kpi-text-xl {
      font-size: 1rem;
      font-weight: 700;
      line-height: 1.5;
    }
    
    @media (min-width: 768px) {
      .kpi-text-xl {
        font-size: 1.125rem;
        line-height: 1.75rem;
      }
    }
    
    @media (min-width: 1024px) {
      .kpi-text-xl {
        font-size: 1.25rem;
        line-height: 1.75rem;
      }
    }
    
    #view-map {
      height: 100%;
      width: 100%;
      min-height: 280px;
      border-radius: 0.5rem; 
      overflow: hidden;
    }
    
    @media (min-width: 768px) {
      #view-map {
        min-height: 320px;
      }
    }
    
    .chart-container {
      height: 250px;
      width: 100%;
    }
    
    @media (min-width: 768px) {
      .chart-container {
        height: 280px;
      }
    }
    
    @media (min-width: 1024px) {
      .chart-container {
        height: 320px;
      }
    }
    
    /* Chart Dark Mode Styles */
    .dark .apexcharts-tooltip { 
      background: #1e293b !important; 
      border: 1px solid #334155 !important; 
    }
    .dark .apexcharts-tooltip-title, 
    .dark .apexcharts-tooltip-text { 
      color: #f1f5f9 !important; 
    }
    .dark .apexcharts-text, 
    .dark .apexcharts-xaxis-label, 
    .dark .apexcharts-yaxis-label { 
      fill: var(--text-secondary-dark) !important; 
    }
    .dark .apexcharts-legend-text { 
      color: var(--text-secondary-dark) !important; 
    }
    .dark .apexcharts-gridline { 
      stroke: #334155 !important; 
    }
    .dark .leaflet-tile-pane { 
      filter: brightness(0.6) invert(1) contrast(3) hue-rotate(200deg) saturate(0.3) brightness(0.7); 
    }
    .dark .leaflet-popup-content-wrapper, 
    .dark .leaflet-popup-tip { 
      background: #0f172a; 
      color: #f1f5f9; 
      box-shadow: 0 3px 14px rgba(0,0,0,0.4); 
    }
  </style>

  <div class="dashboard-container-wrapper">
    <!-- Background Effects -->
    <div class="absolute top-0 left-0 w-1/3 h-1/2 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-full filter blur-3xl opacity-10 dark:opacity-20 pointer-events-none"></div>
    <div class="absolute bottom-0 right-0 w-1/2 h-1/2 bg-gradient-to-br from-blue-900 to-yellow-400 rounded-full filter blur-3xl opacity-10 dark:opacity-15 pointer-events-none"></div>

    <main class="relative max-w-7xl mx-auto z-10">
      <!-- Theme Toggle -->
      <button id="theme-toggle" class="fixed top-4 right-4 z-50 p-2 rounded-lg glass-card text-slate-800 dark:text-slate-200 border-0 shadow-lg md:absolute md:-top-4 md:right-0">
        <svg id="theme-toggle-light-icon" class="w-5 h-5 md:w-6 md:h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path></svg>
        <svg id="theme-toggle-dark-icon" class="w-5 h-5 md:w-6 md:h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path></svg>
      </button>
      
      <!-- Profile Header -->
      <div class="glass-card mb-8 md:mb-12 p-4 flex flex-col sm:flex-row items-center justify-between shadow-none border-0 space-y-4 sm:space-y-0">
        <div class="flex items-center space-x-4">
          <img src="/images/niels.jpg" alt="Niels Veerman" class="w-10 h-10 md:w-12 md:h-12 rounded-full border-2 border-white/50 shadow-lg"/>
          <div class="text-center sm:text-left">
            <h2 class="font-bold text-base md:text-lg text-primary-light dark:text-primary-dark">Niels Veerman</h2>
            <p class="text-xs md:text-sm text-secondary-light dark:text-secondary-dark">Data Enthusiast & Travel Storyteller</p>
          </div>
        </div>
        <a href="/about" class="px-4 py-2 rounded-lg text-xs md:text-sm font-semibold text-primary-light dark:text-primary-dark bg-white/60 dark:bg-slate-800/60 hover:bg-white dark:hover:bg-slate-800 transition shadow-sm">About Me</a>
      </div>

      <!-- Header -->
      <header class="text-center mb-12 md:mb-16">
        <h1 class="main-title mb-4 tracking-tight">Niels Veerman's Real-Time Analytics</h1>
        <p class="main-desc max-w-3xl mx-auto">
          Monitor blog performance, global reach & user engagement at a glance.
        </p>
      </header>

      <!-- Insights Section -->
      <section class="grid grid-cols-1 md:grid-cols-3 gap-6 md:gap-8 mb-12 md:mb-16">
        <div class="glass-card p-4 md:p-6 flex items-center space-x-4">
          <div class="p-2 md:p-3 bg-blue-100 dark:bg-blue-900/50 rounded-lg shrink-0">
            <svg class="w-5 h-5 md:w-6 md:h-6 text-blue-600 dark:text-blue-300" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path></svg>
          </div>
          <div class="min-w-0 flex-1">
            <h3 class="font-bold text-sm md:text-base text-primary-light dark:text-primary-dark">Top Trend</h3>
            <p class="text-xs md:text-sm text-secondary-light dark:text-secondary-dark truncate" id="insight-trend">Analyzing trends...</p>
          </div>
        </div>
        
        <div class="glass-card p-4 md:p-6 flex items-center space-x-4">
          <div class="p-2 md:p-3 bg-yellow-100 dark:bg-yellow-900/50 rounded-lg shrink-0">
            <svg class="w-5 h-5 md:w-6 md:h-6 text-yellow-600 dark:text-yellow-300" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" d="M9.813 15.904 9 18.75l-.813-2.846a4.5 4.5 0 0 0-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 0 0 3.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 0 0 3.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 0 0-3.09 3.09ZM18.259 8.715 18 9.75l-.259-1.035a3.375 3.375 0 0 0-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 0 0 2.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 0 0 2.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 0 0-2.456 2.456Z"/></svg>
          </div>
          <div class="min-w-0 flex-1">
            <h3 class="font-bold text-sm md:text-base text-primary-light dark:text-primary-dark">AI Insight</h3>
            <p class="text-xs md:text-sm text-secondary-light dark:text-secondary-dark truncate" id="insight-ai">Generating summary...</p>
          </div>
        </div>
        
        <div class="glass-card p-4 md:p-6 flex items-center space-x-4">
          <div class="p-2 md:p-3 bg-orange-100 dark:bg-orange-900/50 rounded-lg shrink-0">
            <svg class="w-5 h-5 md:w-6 md:h-6 text-orange-600 dark:text-orange-300" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path></svg>
          </div>
          <div class="min-w-0 flex-1">
            <h3 class="font-bold text-sm md:text-base text-primary-light dark:text-primary-dark">Spike Alert</h3>
            <p class="text-xs md:text-sm text-secondary-light dark:text-secondary-dark truncate" id="insight-spike">Monitoring activity...</p>
          </div>
        </div>
      </section>

      <!-- KPI Section -->
      <section class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4 md:gap-6 lg:gap-8 mb-12 md:mb-16">
        <div class="glass-card p-4 md:p-6 lg:p-8">
          <div class="flex items-center space-x-2 md:space-x-3 mb-2">
            <svg class="w-4 h-4 md:w-6 md:h-6 text-slate-400" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M2.036 12.322a1.012 1.012 0 0 1 0-.639C3.423 7.51 7.36 4.5 12 4.5c4.638 0 8.573 3.007 9.963 7.178.07.207.07.431 0 .639C20.577 16.49 16.64 19.5 12 19.5c-4.638 0-8.573-3.007-9.963-7.178Z" /><path stroke-linecap="round" stroke-linejoin="round" d="M15 12a3 3 0 1 1-6 0 3 3 0 0 1 6 0Z" /></svg>
            <h2 class="kpi-label">Totaal Views</h2>
          </div>
          <div id="kpi-total-views" class="kpi-number text-primary-light dark:text-primary-dark">0</div>
        </div>
        
        <div class="glass-card p-4 md:p-6 lg:p-8">
          <div class="flex items-center space-x-2 md:space-x-3 mb-2">
           <svg class="w-4 h-4 md:w-6 md:h-6 text-slate-400" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="m3.75 13.5 10.5-11.25L12 10.5h8.25L9.75 21.75 12 13.5H3.75Z" /></svg>
            <h2 class="kpi-label">Top Spike</h2>
          </div>
          <div id="kpi-trend-highlight" class="kpi-number kpi-text-lg truncate text-primary-light dark:text-primary-dark">N/A</div>
        </div>
        
         <div class="glass-card p-4 md:p-6 lg:p-8 col-span-2 md:col-span-1">
          <div class="flex items-center space-x-2 md:space-x-3 mb-2">
            <svg class="w-4 h-4 md:w-6 md:h-6 text-slate-400" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M11.48 3.499a.562.562 0 0 1 1.04 0l2.125 5.111a.563.563 0 0 0 .475.31h5.404a.562.562 0 0 1 .321.988l-4.368 3.14a.563.563 0 0 0-.218.66l1.64 5.111a.563.563 0 0 1-.864.614l-4.368-3.14a.563.563 0 0 0-.652 0l-4.368 3.14a.563.563 0 0 1-.864-.614l1.64-5.111a.563.563 0 0 0-.218-.66l-4.368-3.14a.563.563 0 0 1 .321-.988h5.404a.563.563 0 0 0 .475-.31L11.48 3.5Z" /></svg>
            <h2 class="kpi-label">Populairste Post</h2>
          </div>
           <div id="kpi-top-post" class="kpi-number kpi-text-xl truncate text-primary-light dark:text-primary-dark" title="Loading...">Loading...</div>
        </div>
        
        <div class="glass-card p-4 md:p-6 lg:p-8">
          <div class="flex items-center space-x-2 md:space-x-3 mb-2">
            <svg class="w-4 h-4 md:w-6 md:h-6 text-slate-400" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M12 21a9.004 9.004 0 0 0 8.716-6.747M12 21a9.004 9.004 0 0 1-8.716-6.747M12 21c1.35 0 2.463-.153 3.561-.438m-7.122 0A8.966 8.966 0 0 1 12 2.25c1.35 0 2.463.153 3.561.438m0 13.062a8.966 8.966 0 0 1-7.122 0M12 2.25c-4.602 0-8.48 3.067-9.807 7.218c.06.054.12.11.18.168m19.254 0a8.966 8.966 0 0 0-9.807-7.218c.06-.054.12-.11.18-.168M3 12h18M12 2.25V12m0 9.75V12" /></svg>
            <h2 class="kpi-label">Top Land</h2>
          </div>
           <div id="kpi-top-country" class="kpi-number kpi-text-lg truncate text-primary-light dark:text-primary-dark">N/A</div>
        </div>
        
        <div class="glass-card p-4 md:p-6 lg:p-8">
            <div class="flex items-center space-x-2 md:space-x-3 mb-2">
            <svg class="w-4 h-4 md:w-6 md:h-6 text-slate-400" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" /></svg>
            <h2 class="kpi-label">Laatste Bezoek</h2>
          </div>
           <div id="kpi-live-event" class="kpi-number kpi-text-lg text-primary-light dark:text-primary-dark">N/A</div>
        </div>
      </section>

      <!-- Charts and Map Section -->
      <section class="grid grid-cols-1 lg:grid-cols-3 gap-6 md:gap-8 mb-12 md:mb-16">
        <!-- Map -->
        <div class="glass-card p-4 md:p-6 col-span-1 order-2 lg:order-1">
          <h2 class="text-xl md:text-2xl font-bold text-primary-light dark:text-primary-dark mb-4 tracking-tight">🌍 Views per Land</h2>
          <div id="view-map"></div>
        </div>
        
        <!-- Charts -->
        <div class="col-span-1 lg:col-span-2 space-y-6 md:space-y-8 order-1 lg:order-2">
          <!-- Time Series Chart -->
          <div class="glass-card p-4 md:p-6">
            <h2 class="text-xl md:text-2xl font-bold text-primary-light dark:text-primary-dark mb-4 tracking-tight">📈 Views Trend (30 dagen)</h2>
             <div id="time-series-chart" class="chart-container"></div>
          </div>
          
          <!-- Device and Referrers Charts -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6 md:gap-8">
            <div class="glass-card p-4 md:p-6">
              <h2 class="text-lg md:text-2xl font-bold text-primary-light dark:text-primary-dark mb-4 tracking-tight">📱 Apparaten</h2>
               <div id="device-chart" class="chart-container flex justify-center"></div>
            </div>
            <div class="glass-card p-4 md:p-6">
              <h2 class="text-lg md:text-2xl font-bold text-primary-light dark:text-primary-dark mb-4 tracking-tight">🔗 Verkeersbronnen</h2>
               <div id="referrers-chart" class="chart-container"></div>
            </div>
          </div>
        </div>
      </section>

      <!-- Popular Posts -->
      <div class="glass-card mb-12 md:mb-16 p-4 md:p-6 lg:p-8">
        <h2 class="text-xl md:text-2xl font-bold text-primary-light dark:text-primary-dark mb-6 tracking-tight">🏆 Top 10 Posts</h2>
        <div id="popular-posts" class="space-y-3"></div>
      </div>

      <!-- Footer -->
      <footer class="text-center mt-12 md:mt-16 pt-8 border-t border-slate-300 dark:border-slate-700">
        <p class="text-sm md:text-base text-secondary-light dark:text-secondary-dark">Data provided by Niels Veerman's serverless functions.</p>
         <div class="flex justify-center space-x-4 mt-4">
           <a href="https://github.com/featherman-ux" target="_blank" rel="noopener" class="text-slate-500 hover:text-orange-500 transition text-sm md:text-base">GitHub</a>
           <a href="#" class="text-slate-500 hover:text-orange-500 transition text-sm md:text-base">LinkedIn</a>
           <a href="/about" class="text-slate-500 hover:text-orange-500 transition text-sm md:text-base">About</a>
         </div>
      </footer>
    </main>
  </div>

  <script type="module">
    import * as L from 'https://cdn.jsdelivr.net/npm/leaflet@1.9.4/dist/leaflet-src.esm.js';

    // Chart & Map instances
    let timeSeriesChart, deviceChart, referrersChart, mapInstance;
    let mapLayers = [];
    let coordinateData = null;

    // Color palette
    const COLORS = {
      primary: '#023047',
      secondary: '#ffb703',
      accent: '#fb8500'
    };

    // Helpers
    const fmt = n => (n > 999 ? `${(n/1000).toFixed(1)}k` : String(n));
    const ago = d => {
      if (!d) return 'N/A';
      const s = Math.floor((Date.now() - new Date(d))/1000);
      if (s < 60) return `${s}s geleden`;
      const m = Math.floor(s/60);
      if (m < 60) return `${m}m geleden`;
      const h = Math.floor(m/60);
      return h < 24 ? `${h}u geleden` : `${Math.floor(h/24)}d geleden`;
    };

    // Enhanced count-up animation
    function animateCountUp(element, endValue) {
      if (!element) return;
      const startValueText = element.textContent.replace(/[k,]/g, '') || '0';
      const startValue = parseFloat(startValueText) || 0;

      if (startValue === endValue) return;

      const duration = 1200; 
      let startTime = null;

      function animationStep(timestamp) {
        if (!startTime) startTime = timestamp;
        const progress = Math.min((timestamp - startTime) / duration, 1);
        const easeOutProgress = progress * (2 - progress); 
        const currentValue = Math.floor(easeOutProgress * (endValue - startValue) + startValue);
        
        element.textContent = fmt(currentValue);

        if (progress < 1) {
          requestAnimationFrame(animationStep);
        } else {
          element.textContent = fmt(endValue); 
        }
      }
      requestAnimationFrame(animationStep);
    }
    
    // Enhanced Dark Mode Toggle
    const themeToggle = document.getElementById('theme-toggle');
    const lightIcon = document.getElementById('theme-toggle-light-icon');
    const darkIcon = document.getElementById('theme-toggle-dark-icon');
    
    function setDarkMode(isDark) {
      document.documentElement.classList.toggle('dark', isDark);
      lightIcon?.classList.toggle('hidden', !isDark);
      darkIcon?.classList.toggle('hidden', isDark);
      localStorage.setItem('theme', isDark ? 'dark' : 'light');
      
      // Fixed: Add delay for map invalidation to ensure proper rendering
      if(mapInstance) {
        setTimeout(() => {
          mapInstance.invalidateSize();
        }, 100);
      }
      
      // Update all charts with new theme
      setTimeout(() => {
        const chartTheme = getChartTheme();
        if (timeSeriesChart) timeSeriesChart.updateOptions(chartTheme.time);
        if (deviceChart) deviceChart.updateOptions(chartTheme.device);
        if (referrersChart) referrersChart.updateOptions(chartTheme.referrers);
      }, 150);
    }
    
    const prefersDark = localStorage.getItem('theme') === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches);
    setDarkMode(prefersDark);

    themeToggle.addEventListener('click', () => {
      setDarkMode(!document.documentElement.classList.contains('dark'));
    });

    // Enhanced window resize handler for responsiveness
    let resizeTimeout;
    window.addEventListener('resize', () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(() => {
        if (mapInstance) {
          mapInstance.invalidateSize();
        }
        if (timeSeriesChart) timeSeriesChart.resize();
        if (deviceChart) deviceChart.resize();
        if (referrersChart) referrersChart.resize();
      }, 100);
    });

    // API Data Fetching
    async function fetchData(endpoint) {
      try {
        const res = await fetch(endpoint);
        if (!res.ok) { 
          console.error(`Failed to fetch from ${endpoint}`);
          return null; 
        }
        return res.json();
      } catch (e) {
        console.error(`Fetch error for ${endpoint}:`, e);
        return null;
      }
    }
    
    async function fetchAiInsight() {
      try {
        const data = await fetchData('/api/ai-summary');
        return data?.insight || "AI Insight not available.";
      } catch (e) {
        return "Could not generate insight.";
      }
    }

    // Render Functions
    function renderKPIs(total, posts, countries, perDay, latest) {
      const spike = Object.entries(perDay).reduce(
        (best, [day, v]) => (v > best.v ? { day, v } : best),
        { day: 'N/A', v: 0 }
      );
      
      const topCountryEntry = Object.entries(countries).sort((a,b)=>b[1]-a[1])[0];
      const topCountryValue = topCountryEntry ? `${topCountryEntry[0]} (${fmt(topCountryEntry[1])})` : 'N/A';
      
      animateCountUp(document.querySelector("#kpi-total-views"), total);

      const spikeEl = document.querySelector("#kpi-trend-highlight");
      if (spikeEl) spikeEl.textContent = spike.v > 0 ? `${fmt(spike.v)} (${spike.day})` : 'N/A';
      
      const postEl = document.querySelector("#kpi-top-post");
      if (postEl) {
        postEl.textContent = posts[0]?.title || 'N/A';
        postEl.title = posts[0]?.title || 'N/A'; 
      }

      const countryEl = document.querySelector("#kpi-top-country");
      if (countryEl) countryEl.textContent = topCountryValue;

      const eventEl = document.querySelector("#kpi-live-event");
      if (eventEl) eventEl.textContent = ago(latest?.timestamp);
    }

    // Enhanced Chart Theme Helper with Responsive Configuration
    function getChartTheme() {
      const isDark = document.documentElement.classList.contains('dark');
      const labelColor = isDark ? '#94a3b8' : '#64748b';
      const gridColor = isDark ? '#334155' : '#e2e8f0';
      const theme = isDark ? 'dark' : 'light';
      
      const baseLabelStyle = { style: { colors: labelColor, fontWeight: 600 } };
      
      // Responsive configuration for different screen sizes
      const getResponsiveConfig = () => {
        const width = window.innerWidth;
        if (width < 768) {
          return {
            chart: { height: 250 },
            legend: { position: 'bottom', fontSize: '12px' },
            dataLabels: { style: { fontSize: '10px' } }
          };
        } else if (width < 1024) {
          return {
            chart: { height: 280 },
            legend: { position: 'bottom', fontSize: '13px' },
            dataLabels: { style: { fontSize: '11px' } }
          };
        } else {
          return {
            chart: { height: 320 },
            legend: { position: 'bottom', fontSize: '14px' },
            dataLabels: { style: { fontSize: '12px' } }
          };
        }
      };

      const responsiveConfig = getResponsiveConfig();
      
      return {
        time: {
          ...responsiveConfig,
          tooltip: { theme },
          grid: { borderColor: gridColor },
          xaxis: { categories: [], labels: { ...baseLabelStyle, style: { ...baseLabelStyle.style, fontSize: responsiveConfig.dataLabels.style.fontSize } } },
          yaxis: { labels: { ...baseLabelStyle, style: { ...baseLabelStyle.style, fontSize: responsiveConfig.dataLabels.style.fontSize } } },
          responsive: [
            {
              breakpoint: 768,
              options: {
                chart: { height: 250 },
                xaxis: { labels: { style: { fontSize: '10px' } } },
                yaxis: { labels: { style: { fontSize: '10px' } } }
              }
            },
            {
              breakpoint: 1024,
              options: {
                chart: { height: 280 },
                xaxis: { labels: { style: { fontSize: '11px' } } },
                yaxis: { labels: { style: { fontSize: '11px' } } }
              }
            }
          ]
        },
        device: {
          ...responsiveConfig,
          tooltip: { theme },
          legend: { 
            labels: { colors: [labelColor] }, 
            fontWeight: 600, 
            position: 'bottom',
            fontSize: responsiveConfig.legend.fontSize
          },
          responsive: [
            {
              breakpoint: 768,
              options: {
                chart: { height: 250 },
                legend: { fontSize: '12px', position: 'bottom' }
              }
            }
          ]
        },
        referrers: {
          ...responsiveConfig,
          tooltip: { theme },
          grid: { borderColor: gridColor },
          xaxis: { categories: [], labels: { ...baseLabelStyle, style: { ...baseLabelStyle.style, fontSize: responsiveConfig.dataLabels.style.fontSize } } },
          yaxis: { labels: { ...baseLabelStyle, style: { ...baseLabelStyle.style, fontSize: responsiveConfig.dataLabels.style.fontSize } } },
          responsive: [
            {
              breakpoint: 768,
              options: {
                chart: { height: 250 },
                xaxis: { labels: { style: { fontSize: '10px' } } },
                yaxis: { labels: { style: { fontSize: '10px' } } }
              }
            }
          ]
        }
      };
    }

    function renderTimeSeries(data) {
      const dates = Object.keys(data).sort().slice(-30);
      const series = [{ name:'Views', data:dates.map(d=>data[d] || 0) }];
      const themeOpts = getChartTheme().time;
      
      const opts = {
        ...themeOpts,
        series,
        xaxis: { ...themeOpts.xaxis, categories: dates },
        chart: { 
          type: 'area', 
          toolbar: { show: false }, 
          animations: { easing: 'easeOut', speed: 400 },
          redrawOnParentResize: true,
          redrawOnWindowResize: true
        },
        colors: [COLORS.primary],
        stroke: { curve: 'smooth', width: 3 }, 
        fill: { type: 'gradient', gradient: { opacityFrom: 0.5, opacityTo: 0.1 } },
        dataLabels: { enabled: false },
      };
      
      if (!timeSeriesChart) {
        timeSeriesChart = new ApexCharts(document.getElementById('time-series-chart'), opts);
        timeSeriesChart.render();
      } else {
        timeSeriesChart.updateOptions({ ...themeOpts, series, xaxis: { categories: dates } });
      }
    }
    
    function renderDeviceChart(data) {
      const labels = Object.keys(data);
      const series = Object.values(data);
      const themeOpts = getChartTheme().device;
      
      const opts = { 
        ...themeOpts,
        series, 
        labels, 
        chart: { 
          type: 'donut', 
          redrawOnParentResize: true,
          redrawOnWindowResize: true
        },
        colors: [COLORS.primary, COLORS.secondary, COLORS.accent],
        legend: { ...themeOpts.legend }
      };
      
      if (!deviceChart) {
        deviceChart = new ApexCharts(document.getElementById('device-chart'), opts);
        deviceChart.render();
      } else {
        deviceChart.updateOptions({ ...themeOpts, series, labels });
      }
    }
    
    function renderReferrersChart(data) {
      const sorted = Object.entries(data).sort((a,b)=>b[1]-a[1]).slice(0,7);
      const categories = sorted.map(([k])=>k);
      const series = [{ data: sorted.map(([,v])=>v) }];
      const themeOpts = getChartTheme().referrers;

      const opts = { 
        ...themeOpts,
        series, 
        chart: { 
          type: 'bar',
          redrawOnParentResize: true,
          redrawOnWindowResize: true
        },
        xaxis: { ...themeOpts.xaxis, categories }, 
        colors: [COLORS.secondary], 
        plotOptions: { bar: { borderRadius: 6, horizontal: true } },
      };
      
      if (!referrersChart) {
        referrersChart = new ApexCharts(document.getElementById('referrers-chart'), opts);
        referrersChart.render();
      } else {
        referrersChart.updateOptions({ ...themeOpts, series, xaxis: { categories } });
      }
    }

    // Fixed and Enhanced Map Function
    function renderMap(countries) {
      if (!coordinateData) {
        console.warn('Coordinate data not loaded yet');
        return;
      }

      if (!mapInstance) {
        mapInstance = L.map('view-map', { 
          zoomControl: false,
          attributionControl: false
        }).setView([20, 0], 2);
        
        L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
          attribution: '© OpenStreetMap contributors © CARTO',
          subdomains: 'abcd',
          maxZoom: 19
        }).addTo(mapInstance);

        // Add zoom control to bottom right for mobile
        L.control.zoom({
          position: 'bottomright'
        }).addTo(mapInstance);
      }

      // Clear all old circle layers
      mapLayers.forEach(layer => layer.remove());
      mapLayers = [];

      let foundCountries = 0;

      // Enhanced country code matching with better logging
      Object.entries(countries).forEach(([code, views]) => {
        // Try multiple country code variations
        const upperCode = code.toUpperCase();
        const variations = [upperCode, code.toLowerCase(), code];
        
        let countryInfo = null;
        
        for (const variation of variations) {
          countryInfo = coordinateData.get(variation);
          if (countryInfo) break;
        }
        
        if (!countryInfo) {
          console.warn(`No coordinates found for country code: ${code} (tried: ${variations.join(', ')})`);
          return;
        }

        foundCountries++;
        
        const circle = L.circle([countryInfo.lat, countryInfo.lng], {
          radius: Math.max(Math.sqrt(views) * 40000, 50000), // Minimum radius for visibility
          color: COLORS.secondary,
          fillColor: COLORS.secondary,
          fillOpacity: 0.6,
          weight: 2,
          opacity: 0.8
        });
        
        circle.addTo(mapInstance).bindPopup(`<b>${countryInfo.name}</b><br>${fmt(views)} views`);
        mapLayers.push(circle);
      });

      console.log(`Rendered ${foundCountries} countries on map out of ${Object.keys(countries).length} total`);

      // Ensure proper sizing after rendering
      setTimeout(() => {
        mapInstance.invalidateSize();
      }, 100);
    }

    // Enhanced popular posts rendering
    function renderPopular(posts) {
      const container = document.getElementById('popular-posts');
      if (!container) return;
      
      container.innerHTML = posts.slice(0, 10).map((p, i) => `
        <div class="flex justify-between items-center p-3 md:p-4 bg-white/50 dark:bg-slate-800/30 backdrop-filter backdrop-blur-sm rounded-lg shadow-inner">
          <div class="truncate text-primary-light dark:text-primary-dark pr-4 text-sm md:text-base">
            <strong class="text-xs md:text-sm">${i+1}.</strong> ${p.title}
          </div>
          <div class="font-extrabold text-primary-light dark:text-primary-dark ml-4 shrink-0 text-sm md:text-base">${fmt(p.views)}</div>
        </div>
      `).join('');
    }

    // Enhanced data processing and rendering
    async function updateDashboard(data) {
      if (!data || !data.allViewsData) {
        console.warn("Update called with no data. API might be empty or failing.");
        return; 
      }
      
      const { allViewsData, latestEvents } = data;
      const postsArr = Object.entries(allViewsData).map(([path, d]) => ({
        title: path.replace(/^\/blog\//, ''), 
        views: d?.total || 0
      })).sort((a, b) => b.views - a.views);
      
      const total = postsArr.reduce((s, p) => s + p.views, 0);
      const countries = {}, devices = {}, referrers = {}, perDay = {};

      Object.values(allViewsData).forEach(d => {
        if (typeof d !== 'object' || d === null) return; 

        Object.entries(d.countries || {}).forEach(([c, v]) => countries[c] = (countries[c] || 0) + (v || 0));
        Object.entries(d.devices || {}).forEach(([dvc, v]) => devices[dvc] = (devices[dvc] || 0) + (v || 0));
        Object.entries(d.referrers || {}).forEach(([r, v]) => referrers[r] = (referrers[r] || 0) + (v || 0));
        
        (d.timestamps || []).forEach(ts => {
          const timestampString = (typeof ts === 'object' && ts !== null) ? ts.time : ts;
          if (timestampString && typeof timestampString === 'string') {
            const day = timestampString.split('T')[0];
            perDay[day] = (perDay[day] || 0) + 1;
          }
        });
      }); 

      // Render everything with enhanced error handling
      try {
        renderKPIs(total, postsArr, countries, perDay, latestEvents ? latestEvents[0] : null);
        renderPopular(postsArr);
        renderTimeSeries(perDay);
        renderDeviceChart(devices);
        renderReferrersChart(referrers);
        renderMap(countries);

        // Update AI Insights
        fetchAiInsight().then(insight => {
           const el = document.getElementById('insight-ai');
           if (el) el.textContent = insight;
        });

        // Update other insight cards
        const trendEl = document.getElementById('insight-trend');
        if (trendEl && postsArr[0]) {
          trendEl.textContent = `Top post: "${postsArr[0].title}"`;
        }

        const topCountry = Object.entries(countries).sort((a,b) => b[1] - a[1])[0];
        const spikeEl = document.getElementById('insight-spike');
        if (spikeEl && topCountry) {
          spikeEl.textContent = `Top source: ${topCountry[0]}`;
        }
      } catch (error) {
        console.error('Error rendering dashboard components:', error);
      }
    }

    // Enhanced initialization
    async function init() {
      try {
        console.log('Loading country coordinate data...');
        
        // Enhanced country data loading with better error handling
        const coordinateUrls = [
          'https://cdn.jsdelivr.net/gh/hdutchison/iso-country-codes@master/data.json',
          'https://raw.githubusercontent.com/stefangabos/world_countries/master/data/countries/en/countries.json'
        ];
        
        let coordinateResponse = null;
        
        for (const url of coordinateUrls) {
          try {
            const res = await fetch(url);
            if (res.ok) {
              const data = await res.json();
              coordinateResponse = data;
              console.log(`Successfully loaded coordinates from: ${url}`);
              break;
            }
          } catch (e) {
            console.warn(`Failed to load from ${url}:`, e);
          }
        }
        
        if (coordinateResponse) {
          // Handle different data formats
          let countryArray = Array.isArray(coordinateResponse) ? coordinateResponse : coordinateResponse.countries || Object.values(coordinateResponse);
          
          if (!Array.isArray(countryArray)) {
            console.error('Unexpected coordinate data format');
            return;
          }

          // Create comprehensive country code mapping
          coordinateData = new Map();
          
          countryArray.forEach(country => {
            const codes = [
              country.alpha2 || country.code || country.iso2,
              country.alpha3 || country.iso3,
              country.countryCode,
              country.cca2,
              country.cca3
            ].filter(Boolean);
            
            const name = country.name || country.country || country.en_short_name;
            const lat = parseFloat(country.latitude || country.lat || country.latlng?.[0]);
            const lng = parseFloat(country.longitude || country.lng || country.latlng?.[1]);
            
            if (name && !isNaN(lat) && !isNaN(lng)) {
              const countryInfo = { name, lat, lng };
              codes.forEach(code => {
                if (code) {
                  coordinateData.set(code.toUpperCase(), countryInfo);
                  coordinateData.set(code.toLowerCase(), countryInfo);
                }
              });
            }
          });
          
          console.log(`Loaded coordinates for ${coordinateData.size} country codes`);
        } else {
          console.error('Failed to load country coordinate data from all sources');
        }
      } catch (e) {
        console.error('Critical error loading coordinate data:', e);
      }
      
      // Load initial dashboard data
      console.log('Loading initial analytics data...');
      const initialData = await fetchData('/api/view');
      if (initialData) {
        updateDashboard(initialData);
      } else {
        console.error('Failed to load initial analytics data');
      }
      
      // Enhanced polling with error recovery
      let pollAttempts = 0;
      const maxPollAttempts = 5;
      
      const poll = async () => {
        try {
          console.log('Fetching fresh dashboard data...');
          const fresh = await fetchData('/api/view');
          if (fresh) {
            updateDashboard(fresh);
            pollAttempts = 0; // Reset on success
          } else {
            pollAttempts++;
            console.warn(`Poll attempt ${pollAttempts} failed`);
          }
        } catch (error) {
          pollAttempts++;
          console.error(`Poll error (attempt ${pollAttempts}):`, error);
        }
        
        // Continue polling unless we've exceeded max attempts
        if (pollAttempts < maxPollAttempts) {
          setTimeout(poll, 15000);
        } else {
          console.error('Max poll attempts reached, stopping polling');
        }
      };
      
      // Start polling
      setTimeout(poll, 15000);
    }

    // Initialize everything
    init().catch(error => {
      console.error('Failed to initialize dashboard:', error);
    });
  </script>
</BaseLayout>
