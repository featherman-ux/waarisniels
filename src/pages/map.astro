---
import BaseLayout from '../layouts/BaseLayout.astro';

const pageTitle = "Kaart";
const pageDescription = "Eenvoudige, snelle kaart met mijn route en stops (bus, motor, vlucht).";
---

<link
  slot="head"
  rel="stylesheet"
  href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
/>
<script
  slot="head"
  src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
  defer
></script>

<style>
  :root {
    --clr-primary:   #4f46e5;
    --clr-secondary: #10b981;
    --clr-accent:    #ffb703;
    --clr-light:     #f8f9fa;
    --clr-dark:      #e3e7ed;
  }
  .hero {
    background: var(--clr-primary);
    color: white;
    text-align: center;
    padding: 3rem 1rem;
    border-radius: 1rem;
    margin-bottom: 2rem;
    box-shadow: var(--shadow-md);
  }
  .hero h1 {
    font-size: 2rem;
    font-weight: 700;
    margin-bottom: .5rem;
  }
  .hero p {
    font-size: 1rem;
    opacity: .85;
  }
  .card {
    background: white;
    border-radius: 1rem;
    overflow: hidden;
    box-shadow: var(--shadow-md);
    max-width: 1280px;
    margin: 0 auto 4rem;
    padding: 0; /* no padding: map fills entire card */
  }
  .map-wrap {
    height: 600px;
    width: 100%;
  }
  .legend-bar {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 1rem;
    background: var(--clr-dark);
    padding: 1rem;
    font-size: .95rem;
    border-radius: 0 0 1rem 1rem;
  }
  .legend-item {
    display: flex;
    align-items: center;
    gap: .5rem;
    color: #374151;
  }
  .legend-line {
    width: 24px;
    height: 0;
    border-top-width: 3px;
    border-top-style: solid;
  }
  .note {
    text-align: center;
    margin: 1rem 0;
    color: var(--clr-text-subtle);
    font-size: .9rem;
  }
  @media (max-width: 640px) {
    .map-wrap { height: 400px; }
    .hero h1 { font-size: 1.75rem; }
  }
</style>

<BaseLayout title={pageTitle} description={pageDescription}>
  <section class="hero">
    <h1>{pageTitle}</h1>
    <p>Hopelijk nu sneller en vloeiender!</p>
  </section>

  <article class="card">
    <div id="map" class="map-wrap"></div>
    <div class="legend-bar">
      <div class="legend-item">
        <span class="legend-line" style="border-color: var(--clr-primary);"></span>Bus
      </div>
      <div class="legend-item">
        <span class="legend-line" style="border-color: var(--clr-secondary); border-style: dotted;"></span>Motor
      </div>
      <div class="legend-item">
        <span class="legend-line" style="border-color: var(--clr-accent); border-style: dashed;"></span>Vlucht
      </div>
      <div class="legend-item">
        <span class="legend-line" style="width:0;"></span>Stops / steden
      </div>
    </div>
  </article>

  <p class="note">Kaartdata wordt lokaal gecachet voor vlottere navigatie.</p>
</BaseLayout>

<script is:inline defer>
  document.addEventListener('DOMContentLoaded', async () => {
    if (typeof L === 'undefined') return;

    const map = L.map('map', {
      scrollWheelZoom: false,
      zoomControl: false,
      inertia: true,
    }).setView([-0.18, -78.47], 6);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: 'Â© OpenStreetMap contributors',
      maxZoom: 18,
      detectRetina: true,
    }).addTo(map);

    const [routeRes, placesRes] = await Promise.all([
      fetch('/data/route.geojson'),
      fetch('/data/places.json'),
    ]);
    const routeGeo = routeRes.ok ? await routeRes.json() : null;
    const places = placesRes.ok ? await placesRes.json() : [];

    if (routeGeo) {
      L.geoJSON(routeGeo, {
        style: ({ properties }) => {
          const m = properties.mode;
          if (m === 'flight') return { color: getComputedStyle(document.documentElement).getPropertyValue('--clr-accent').trim(), weight: 4, dashArray: '6 6' };
          if (m === 'motor') return { color: getComputedStyle(document.documentElement).getPropertyValue('--clr-secondary').trim(), weight: 4, dashArray: '2 8' };
          return { color: getComputedStyle(document.documentElement).getPropertyValue('--clr-primary').trim(), weight: 4 };
        },
      }).addTo(map);
    }

    const markers = places.map(p => {
      const mk = L.marker([p.lat, p.lon]).addTo(map);
      mk.bindPopup(`<strong>${p.name}</strong>${p.notes ? '<br>' + p.notes : ''}`);
      return mk;
    });

    const group = L.featureGroup(markers);
    if (group.getBounds().isValid()) {
      map.fitBounds(group.getBounds().pad(0.1));
    }
  });
</script>